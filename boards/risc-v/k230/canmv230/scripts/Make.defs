############################################################################
# boards/risc-v/k230/canmv230/scripts/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

include $(TOPDIR)/.config
include $(TOPDIR)/tools/Config.mk
include $(TOPDIR)/arch/risc-v/src/common/Toolchain.defs

ifeq ($(CONFIG_ARCH_CHIP_K230),y)
ifeq ($(CONFIG_BUILD_KERNEL),y)
  LDSCRIPT = ld-kernel.script
else ifeq ($(CONFIG_BUILD_PROTECTED),y)
  LDSCRIPT = ld-protected.script
else
  LDSCRIPT = ld-flat.script
endif
endif

ARCHSCRIPT += $(BOARD_DIR)$(DELIM)scripts$(DELIM)$(LDSCRIPT)
ARCHPICFLAGS = -fpic -msingle-pic-base

CFLAGS := $(ARCHCFLAGS) $(ARCHOPTIMIZATION) $(ARCHCPUFLAGS) $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe
CPICFLAGS = $(ARCHPICFLAGS) $(CFLAGS)
CXXFLAGS := $(ARCHCXXFLAGS) $(ARCHOPTIMIZATION) $(ARCHCPUFLAGS) $(ARCHXXINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe
CXXPICFLAGS = $(ARCHPICFLAGS) $(CXXFLAGS)
CPPFLAGS := $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
AFLAGS += $(CFLAGS) -D__ASSEMBLY__

# ELF module definitions

CELFFLAGS = $(CFLAGS)
CXXELFFLAGS = $(CXXFLAGS)

LDELFFLAGS = --oformat elf64-littleriscv
ifeq ($(CONFIG_BINFMT_ELF_RELOCATABLE),y)
LDELFFLAGS += -r
endif

# POSTBUILD management

# KERNEL build needs real ROMFS and SBI wrapping

ifeq ($(CONFIG_BUILD_KERNEL),y)
ifeq ($(wildcard $(BOARD_DIR)$(DELIM)src$(DELIM)romfs_boot.c),)
define POSTBUILD
  $(Q) echo "Please replace stub ROMFS w/ real one."
  $(Q) rm $(BOARD_DIR)$(DELIM)src$(DELIM)libboard.a
endef
else
define POSTBUILD
  $(Q) echo "wrap nuttx.bin w/ SBI to run on target."
endef
endif
endif

# PROTECTED build needs pad-combine operations

ifeq ($(CONFIG_BUILD_PROTECTED),y)
define POSTBUILD
  $(Q) echo "pad-combine nuttx.bin and nuttx_user.bin to try on target."
endef
endif
