############################################################################
# boards/sim/sim/sim/scripts/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

include $(TOPDIR)/.config
include $(TOPDIR)/tools/Config.mk

HOSTOS = ${shell uname -o 2>/dev/null || uname -s 2>/dev/null || echo "Other"}

# NuttX is sometimes built as a native target.
# In that case, the __NuttX__ macro is predefined by the compiler.
# https://github.com/NuttX/buildroot
#
# In other cases, __NuttX__ is an ordinary user-definded macro.
# It's especially the case for NuttX sim, which is a target to run
# the entire NuttX as a program on the host OS, which can be Linux,
# macOS, Windows, etc.
# https://cwiki.apache.org/confluence/display/NUTTX/NuttX+Simulation
# In that case, the host OS compiler is used to build NuttX.
# Thus, eg. NuttX sim on macOS is built with __APPLE__.
# We #undef predefined macros for those possible host OSes here
# because the OS APIs this library should use are of NuttX,
# not the host OS.

ARCHDEFINES += -U_AIX -U_WIN32 -U__APPLE__ -U__FreeBSD__
ARCHDEFINES += -U__NetBSD__ -U__linux__ -U__sun__ -U__unix__

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHOPTIMIZATION = -g
endif

ifneq ($(CONFIG_DEBUG_NOOPT),y)
  ARCHOPTIMIZATION += -O2 -fno-strict-aliasing
endif

ifeq ($(CONFIG_STACK_CANARIES),y)
  ARCHOPTIMIZATION += -fstack-protector-all
endif

ifeq ($(CONFIG_SIM_SANITIZE),y)
  ARCHOPTIMIZATION += -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer
endif

ARCHCPUFLAGS = -fno-builtin
ARCHCPUFLAGSXX = -fno-builtin -nostdinc++
ifeq ($(CONFIG_CXX_EXCEPTION),)
  ARCHCPUFLAGSXX += -fno-exceptions -fcheck-new
endif
ARCHPICFLAGS = -fpic
ARCHWARNINGS = -Wall -Wstrict-prototypes -Wshadow -Wundef
ARCHWARNINGSXX = -Wall -Wshadow -Wundef

# Add -fvisibility=hidden
# Because we don't want export nuttx's symbols to share libraries

ARCHCPUFLAGS += -fvisibility=hidden
ARCHCPUFLAGSXX += -fvisibility=hidden

# Add -fno-common because macOS "ld -r" doesn't seem to pick objects
# for common symbols.
ARCHCPUFLAGS += -fno-common
ARCHCPUFLAGSXX += -fno-common

ifeq ($(CONFIG_SIM_M32),y)
  ARCHCPUFLAGS += -m32
  ARCHCPUFLAGSXX += -m32
endif

CC = $(CROSSDEV)cc
CXX = $(CROSSDEV)c++
CPP = $(CROSSDEV)cc -E -P -x c
LD = $(CROSSDEV)ld
ifeq ($(CONFIG_HOST_MACOS),y)
STRIP = $(CROSSDEV)strip
AR = $(TOPDIR)/tools/macar-rcs.sh
else
STRIP = $(CROSSDEV)strip --strip-unneeded
AR = $(CROSSDEV)ar rcs
endif
NM = $(CROSSDEV)nm
OBJCOPY = $(CROSSDEV)objcopy
OBJDUMP = $(CROSSDEV)objdump

# Note: -fshort-wchar for the case where NuttX and the host OS have
# differnt wchar_t. On Nuttx, it's uint16_t. On macOS, it's 32-bit.
CFLAGS := $(ARCHWARNINGS) $(ARCHOPTIMIZATION) \
   $(ARCHCPUFLAGS) $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe \
   -fshort-wchar
CXXFLAGS := $(ARCHWARNINGSXX) $(ARCHOPTIMIZATION) \
   $(ARCHCPUFLAGSXX) $(ARCHXXINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe \
   -fshort-wchar
CPPFLAGS := $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) \
   -fshort-wchar
AFLAGS := $(CFLAGS) -D__ASSEMBLY__

ifeq ($(CONFIG_LIBCXX),y)
  # Why c++14?
  #  * libcxx seems to require c++11.
  #  * The compiler defaults varies:
  #      clang/macOS (from xcode): 199711L
  #      gcc/ubuntu:               201402L
  #  * There is a precedent to use c++14.
  #    (boards/arm/stm32l4/nucleo-l476rg/scripts/Make.defs)
  CXXFLAGS += -std=c++14

  ifeq ($(CONFIG_HOST_MACOS),y)
    # macOS uses libc++abi
    CXXFLAGS += -DLIBCXX_BUILDING_LIBCXXABI
  else
    # Linux C++ ABI seems vary.
    # Probably __GLIBCXX__ is the best bet.
    # XXX what to do for windows?
    CXXFLAGS += -D__GLIBCXX__
  endif
endif

# Loadable module definitions

CMODULEFLAGS = $(CFLAGS)
# -fno-pic to avoid GOT relocations
CMODULEFLAGS += -fno-pic
ifeq ($(CONFIG_LIBC_ARCH_ELF_64BIT),y)
  # For amd64:
  # It seems macOS/x86_64 loads the program text around 00000001_xxxxxxxx.
  # The gcc default (-mcmodel=small) would produce out-of-range 32-bit
  # relocations.
  # Even on Linux, NuttX modules are loaded into the NuttX heap, which
  # can be out of range with -mcmodel=small.
  CMODULEFLAGS += -mcmodel=large
endif
# On Linux, we (ab)use the host compiler to compile binaries for NuttX.
# Explicitly disable features which might be default on the host while
# not available on NuttX.
CMODULEFLAGS += -fno-stack-protector

LDMODULEFLAGS = -r -e module_initialize
ifeq ($(CONFIG_CYGWIN_WINTOOL),y)
  LDMODULEFLAGS += -T "${shell cygpath -w $(TOPDIR)/libs/libc/modlib/gnu-elf.ld}"
else
  LDMODULEFLAGS += -T $(TOPDIR)/libs/libc/modlib/gnu-elf.ld
endif

# NuttX modules are ELF binaries.
# Non-ELF platforms like macOS need to use a separate ELF toolchain.
ifeq ($(CONFIG_HOST_MACOS),y)
  # eg. brew install x86_64-elf-gcc
  MODULECC = x86_64-elf-gcc
  MODULELD = x86_64-elf-ld
  MODULESTRIP = x86_64-elf-strip --strip-unneeded
endif

# ELF module definitions

CELFFLAGS = $(CFLAGS)
CXXELFFLAGS = $(CXXFLAGS)
# -fno-pic to avoid GOT relocations
CELFFLAGS += -fno-pic
CXXELFFLAGS += -fno-pic

LDELFFLAGS = -r -e main
ifeq ($(CONFIG_CYGWIN_WINTOOL),y)
  LDELFFLAGS += -T "${shell cygpath -w $(BOARD_DIR)$(DELIM)scripts$(DELIM)gnu-elf.ld}"
else
  LDELFFLAGS += -T $(BOARD_DIR)$(DELIM)scripts$(DELIM)gnu-elf.ld
endif

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  CCLINKFLAGS += -g
endif

ifeq ($(CONFIG_SIM_M32),y)
  LDLINKFLAGS += -melf_i386
  CCLINKFLAGS += -m32
  LDFLAGS += -m32
  LDMODULEFLAGS += -melf_i386
  LDELFFLAGS += -melf_i386
  HOSTLDFLAGS += -m32
endif

ifeq ($(CONFIG_SIM_SANITIZE),y)
  CCLINKFLAGS += -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer
  HOSTLDFLAGS += -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer
endif

HOSTCFLAGS = $(ARCHWARNINGS) $(ARCHOPTIMIZATION) \
   $(ARCHCPUFLAGS) $(HOSTINCLUDES) $(EXTRAFLAGS) -pipe
