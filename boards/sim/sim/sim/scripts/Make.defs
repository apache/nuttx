############################################################################
# boards/sim/sim/sim/scripts/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

include $(TOPDIR)/.config
include $(TOPDIR)/tools/Config.mk

# NuttX is sometimes built as a native target.
# In that case, the __NuttX__ macro is predefined by the compiler.
# https://github.com/NuttX/buildroot
#
# In other cases, __NuttX__ is an ordinary user-definded macro.
# It's especially the case for NuttX sim, which is a target to run
# the entire NuttX as a program on the host OS, which can be Linux,
# macOS, Windows, etc.
# https://cwiki.apache.org/confluence/display/NUTTX/NuttX+Simulation
# In that case, the host OS compiler is used to build NuttX.
# Thus, eg. NuttX sim on macOS is built with __APPLE__.
# We #undef predefined macros for those possible host OSes here
# because the OS APIs this library should use are of NuttX,
# not the host OS.

ARCHDEFINES += -U_AIX -U_WIN32 -U__APPLE__ -U__FreeBSD__
ARCHDEFINES += -U__NetBSD__ -U__linux__ -U__sun__ -U__unix__
ARCHDEFINES += -U__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHOPTIMIZATION += -g
endif

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  ARCHOPTIMIZATION += $(CONFIG_DEBUG_OPTLEVEL)
else ifeq ($(CONFIG_DEBUG_FULLOPT),y)
  ARCHOPTIMIZATION += -O2
endif

ifneq ($(CONFIG_DEBUG_NOOPT),y)
  ARCHOPTIMIZATION += -fno-strict-aliasing
endif

ifeq ($(CONFIG_FRAME_POINTER),y)
  ARCHOPTIMIZATION += -fno-omit-frame-pointer -fno-optimize-sibling-calls
else
  ARCHOPTIMIZATION += -fomit-frame-pointer
endif

ifeq ($(CONFIG_STACK_CANARIES),y)
  ARCHOPTIMIZATION += -fstack-protector-all
endif

ifeq ($(CONFIG_STACK_USAGE),y)
  ARCHOPTIMIZATION += -fstack-usage
endif

ifneq ($(CONFIG_STACK_USAGE_WARNING),0)
  ARCHOPTIMIZATION += -Wstack-usage=$(CONFIG_STACK_USAGE_WARNING)
endif

ifeq ($(CONFIG_ARCH_COVERAGE_ALL),y)
  ARCHOPTIMIZATION += -fprofile-generate -ftest-coverage
endif

ifeq ($(CONFIG_SIM_ASAN),y)
  ARCHOPTIMIZATION += -fsanitize=address -fsanitize-address-use-after-scope
  ARCHOPTIMIZATION += -fsanitize=pointer-compare -fsanitize=pointer-subtract
else ifeq ($(CONFIG_MM_KASAN_ALL),y)
  ARCHOPTIMIZATION += -fsanitize=kernel-address
endif

ifeq ($(CONFIG_SIM_UBSAN),y)
  ARCHOPTIMIZATION += -fsanitize=undefined
else
  ifeq ($(CONFIG_MM_UBSAN_ALL),y)
    ARCHOPTIMIZATION += $(CONFIG_MM_UBSAN_OPTION)
  endif

  ifeq ($(CONFIG_MM_UBSAN_TRAP_ON_ERROR),y)
    ARCHOPTIMIZATION += -fsanitize-undefined-trap-on-error
  endif
endif

ifeq ($(CONFIG_ARCH_INSTRUMENT_ALL),y)
  ARCHOPTIMIZATION += -finstrument-functions
endif

# Add -fno-common because macOS "ld -r" doesn't seem to pick objects
# for common symbols.
ARCHCFLAGS += -fno-common
ARCHCXXFLAGS += -fno-common -nostdinc++

# Add -fvisibility=hidden
# Because we don't want export nuttx's symbols to share libraries

ARCHCFLAGS += -fvisibility=hidden
ARCHCXXFLAGS += -fvisibility=hidden

ARCHCFLAGS += -ffunction-sections -fdata-sections
ARCHCXXFLAGS += -ffunction-sections -fdata-sections

ARCHCFLAGS += -Wall -Wstrict-prototypes -Wshadow -Wundef -Wno-attributes -Wno-unknown-pragmas
ARCHCXXFLAGS += -Wall -Wshadow -Wundef -Wno-attributes -Wno-unknown-pragmas

ifneq ($(CONFIG_CXX_STANDARD),)
  ARCHCXXFLAGS += -std=$(CONFIG_CXX_STANDARD)
endif

ifeq ($(CONFIG_CXX_EXCEPTION),)
  ARCHCXXFLAGS += -fno-exceptions -fcheck-new
endif
ifeq ($(CONFIG_CXX_RTTI),)
  ARCHCXXFLAGS += -fno-rtti
endif

ifeq ($(CONFIG_SIM_M32),y)
  ARCHCFLAGS += -m32
  ARCHCXXFLAGS += -m32
endif

# LLVM style architecture flags

ifeq ($(CONFIG_HOST_X86_64),y)
  ifeq ($(CONFIG_SIM_M32),y)
    LLVM_ARCHTYPE := x86
    LLVM_CPUTYPE := i686
  else
    LLVM_ARCHTYPE := x86_64
    LLVM_CPUTYPE := skylake
  endif
else ifeq ($(CONFIG_HOST_X86_32),y)
  LLVM_ARCHTYPE := x86
  LLVM_CPUTYPE := i686
else ifeq ($(CONFIG_HOST_ARM64),y)
  LLVM_ARCHTYPE := aarch64
  LLVM_CPUTYPE := cortex-a53
else ifeq ($(CONFIG_HOST_ARM),y)
  LLVM_ARCHTYPE := arm
  LLVM_CPUTYPE := cortex-a9
endif

ifeq ($(CONFIG_HOST_LINUX),y)
  LLVM_ABITYPE := gnu
else ifeq ($(CONFIG_HOST_MACOS),y)
  LLVM_ABITYPE := darwin
endif

ARCHPICFLAGS = -fpic

CC = $(CROSSDEV)cc
CXX = $(CROSSDEV)c++
CPP = $(CROSSDEV)cc -E -P -x c
LD = $(CROSSDEV)ld
ifeq ($(CONFIG_HOST_MACOS),y)
STRIP = $(CROSSDEV)strip
AR = $(TOPDIR)/tools/macar-qcs.sh
else
STRIP = $(CROSSDEV)strip --strip-unneeded
AR = $(CROSSDEV)ar rcs
endif
NM = $(CROSSDEV)nm
OBJCOPY = $(CROSSDEV)objcopy
OBJDUMP = $(CROSSDEV)objdump

# Zig toolchain

include $(TOPDIR)/tools/Zig.defs

# Rust toolchain

include $(TOPDIR)/tools/Rust.defs

CFLAGS := $(ARCHOPTIMIZATION) $(ARCHCFLAGS) $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe
CXXFLAGS := $(ARCHOPTIMIZATION) $(ARCHCXXFLAGS) $(ARCHXXINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe
CPPFLAGS := $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
AFLAGS := $(CFLAGS) -D__ASSEMBLY__

ifeq ($(CONFIG_HOST_LINUX),y)
  LDLINKFLAGS += -z noexecstack
endif

ifeq ($(CONFIG_LIBCXX),y)
  ifeq ($(CONFIG_HOST_MACOS),y)
    # macOS uses libc++abi
    CXXFLAGS += -DLIBCXX_BUILDING_LIBCXXABI
  else
    # Linux C++ ABI seems vary.
    # Probably __GLIBCXX__ is the best bet.
    # XXX what to do for windows?
    CXXFLAGS += -D__GLIBCXX__
  endif

  # Disable availability macros.
  # The availability on Host OS is not likely appropriate for NuttX.
  #
  # Note: When compiling NuttX apps, we undefine __APPLE__.
  # It makes libcxx __availability header unhappy.
  # https://github.com/llvm/llvm-project/blob/2e2999cd44f6ec9a5e396fa0113497ea82582f69/libcxx/include/__availability#L258
  CXXFLAGS += -D_LIBCPP_DISABLE_AVAILABILITY
endif

# Loadable module definitions

CMODULEFLAGS = $(CFLAGS)
# -fno-pic to avoid GOT relocations
CMODULEFLAGS += -fno-pic
ifeq ($(CONFIG_LIBC_ARCH_ELF_64BIT),y)
  # For amd64:
  # It seems macOS/x86_64 loads the program text around 00000001_xxxxxxxx.
  # The gcc default (-mcmodel=small) would produce out-of-range 32-bit
  # relocations.
  # Even on Linux, NuttX modules are loaded into the NuttX heap, which
  # can be out of range with -mcmodel=small.
  CMODULEFLAGS += -mcmodel=large
endif
# On Linux, we (ab)use the host compiler to compile binaries for NuttX.
# Explicitly disable features which might be default on the host while
# not available on NuttX.
CMODULEFLAGS += -fno-stack-protector

LDMODULEFLAGS = -r -e module_initialize --gc-sections
LDMODULEFLAGS += -T $(call CONVERT_PATH,$(TOPDIR)/libs/libc/modlib/gnu-elf.ld)
SHMODULEFLAGS = -Bsymbolic -G -Bdynamic

# NuttX modules are ELF binaries.
# Non-ELF platforms like macOS need to use a separate ELF toolchain.
ifeq ($(CONFIG_HOST_MACOS),y)
  # eg. brew install x86_64-elf-gcc
  MODULECC = x86_64-elf-gcc
  MODULELD = x86_64-elf-ld
  MODULESTRIP = x86_64-elf-strip --strip-unneeded
endif

# ELF module definitions

CELFFLAGS = $(CFLAGS)
CXXELFFLAGS = $(CXXFLAGS)
# -fno-pic to avoid GOT relocations
CELFFLAGS += -fno-pic
CXXELFFLAGS += -fno-pic
ifeq ($(CONFIG_LIBC_ARCH_ELF_64BIT),y)
  # See the comment on CMODULEFLAGS above.
  CELFFLAGS += -mcmodel=large
  CXXELFFLAGS += -mcmodel=large
endif

LDELFFLAGS = -r -e main --gc-sections
LDELFFLAGS += -T $(call CONVERT_PATH,$(TOPDIR)/binfmt/libelf/gnu-elf.ld)

ifeq ($(CONFIG_HOST_MACOS),y)
  LDFLAGS += -Wl,-dead_strip
else
  LDFLAGS += -Wl,--gc-sections

  # Let the symbol table link from 0x400000
  # which is more convenient for debugging.
  LDFLAGS += -Wl,-Ttext-segment=0x400000
endif

ifeq ($(CONFIG_DEBUG_LINK_MAP),y)
  ifeq ($(CONFIG_HOST_MACOS),)
    LDFLAGS += -Wl,-Map=$(TOPDIR)/nuttx.map
  endif
endif

ifeq ($(CONFIG_SIM_M32),y)
  LDLINKFLAGS += -melf_i386
  LDFLAGS += -m32
  LDMODULEFLAGS += -melf_i386
  SHMODULEFLAGS += -melf_i386
  LDELFFLAGS += -melf_i386
endif
