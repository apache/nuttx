############################################################################
# boards/z80/ez80/z20x/scripts/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

include $(TOPDIR)/.config
include $(TOPDIR)/tools/Config.mk
include ${TOPDIR}/arch/z80/src/ez80/Toolchain.defs

# CFLAGS

ifeq ($(CONFIG_WINDOWS_NATIVE),y)
  ARCHASMINCLUDES = -include:$(TOPDIR)\include;$(ZDSSTDINCDIR);$(ZDSZILOGINCDIR)
  EARCHASMINCLUDES = -include:$(TOPDIR)\include;$(ZDSSTDINCDIR);$(ZDSZILOGINCDIR)
  ARCHSTDINCLUDES = -stdinc:$(TOPDIR)\include;$(ZDSSTDINCDIR);$(ZDSZILOGINCDIR)
  ARCHUSRINCLUDES = -usrinc:.
else
  ARCHASMINCLUDES = -include:'$(WTOPDIR)\include;$(WZDSSTDINCDIR);$(WZDSZILOGINCDIR)'
  EARCHASMINCLUDES = -include:'$(ETOPDIR)\include;$(EZDSSTDINCDIR);$(EZDSZILOGINCDIR)'
  ARCHSTDINCLUDES = -stdinc:'$(WTOPDIR)\include;$(WZDSSTDINCDIR);$(WZDSZILOGINCDIR)'
  ARCHUSRINCLUDES = -usrinc:'.'
endif

# Assembler definitions

ifeq ($(CONFIG_ARCH_CHIP_EZ80F92),y)
  ARCHCPU = eZ80F92
  ARCHCPUDEF = _EZ80F92
  ARCHFAMILY = _EZ80ACCLAIM!
else ifeq ($(CONFIG_ARCH_CHIP_EZ80F91),y)
  ARCHCPU = eZ80F91
  ARCHCPUDEF = _EZ80F91
  ARCHFAMILY = _EZ80ACCLAIM!
endif

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHASMOPTIMIZATION = -debug -NOsdiopt
else
  ARCHASMOPTIMIZATION = -nodebug -NOsdiopt
endif

ARCHASMCPUFLAGS = -cpu:$(ARCHCPU) -NOigcase
ARCHASMLIST = -list -NOlistmac -name -pagelen:56 -pagewidth:80 -quiet
ARCHASMWARNINGS = -warn
ARCHASMDEFINES = -define:$(ARCHCPUDEF)=1 -define:$(ARCHFAMILYDEF)=1 -define:__ASSEMBLY__
AFLAGS = $(ARCHASMCPUFLAGS) $(ARCHASMINCLUDES) $(ARCHASMLIST) $(ARCHASMWARNINGS) $(ARCHASMOPTIMIZATION)

# Compiler definitions

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHOPTIMIZATION = -debug
else
  ARCHOPTIMIZATION = -nodebug
endif

ifeq ($(CONFIG_DEBUG_NOOPT),y)
  ARCHOPTIMIZATION += -reduceopt
else
  ARCHOPTIMIZATION += -optsize
endif

ARCHCPUFLAGS = -chartype:S -promote -cpu:$(ARCHCPU) -NOgenprintf -NOmodsect \
               -asmsw:" $(ARCHASMCPUFLAGS) $(EARCHASMINCLUDES) $(ARCHASMWARNINGS) $(ARCHASMOPTIMIZATION)"
ARCHLIST = -keeplst -NOlist -NOlistinc -keepasm
ARCHPICFLAGS =
ARCHWARNINGS = -warn
ARCHDEFINES = -define:$(ARCHCPUDEF) -define:$(ARCHFAMILYDEF)
ARCHINCLUDES = $(ARCHSTDINCLUDES) $(ARCHUSRINCLUDES)
CFLAGS = $(ARCHWARNINGS) $(ARCHOPTIMIZATION) $(ARCHLIST) $(ARCHCPUFLAGS) $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRADEFINES)

CPPDEFINES = -D$(ARCHFAMILYDEF) -D$(ARCHCPUDEF) -D__ASSEMBLY__
CPPINCLUDES = -I$(TOPDIR)$(DELIM)include
CPPFLAGS = $(CPPDEFINES) $(CPPINCLUDES)

# Librarian definitions

ARFLAGS = -quiet -warn

# Linker definitions

ifeq ($(CONFIG_BOOT_RUNFROMFLASH),y)
  LDSCRIPT = z20x_flash.linkcmd
else ifeq ($(CONFIG_Z20X_COPYTORAM),y)
  LDSCRIPT = z20x_copytoram.linkcmd
else # ifeq ($(CONFIG_BOOT_RUNFROMEXTSRAM),y)
  LDSCRIPT = z20x_ram.linkcmd
endif

LINKCMDTEMPLATE = $(TOPDIR)$(DELIM)boards$(DELIM)$(CONFIG_ARCH)$(DELIM)$(CONFIG_ARCH_CHIP)$(DELIM)$(CONFIG_ARCH_BOARD)$(DELIM)scripts$(DELIM)$(LDSCRIPT)

# Tool names/paths.

CROSSDEV =
CC = $(ZDSBINDIR)$(DELIM)ez80cc.exe
CPP = gcc -E
LD = $(ZDSBINDIR)$(DELIM)ez80link.exe
AS = $(ZDSBINDIR)$(DELIM)ez80asm.exe
AR = $(ZDSBINDIR)$(DELIM)ez80lib.exe

# File extensions

ASMEXT = .asm
OBJEXT = .obj
LIBEXT = .lib
EXEEXT = .lod
HEXEXT = .hex

# These are the macros that will be used in the NuttX make system
# to compile and assembly source files and to insert the resulting
# object files into an archive

ifeq ($(CONFIG_WINDOWS_NATIVE),y)

define PREPROCESS
	@echo CPP: $1->$2
	$(Q) $(CPP) $(CPPFLAGS) $($(strip $1)_CPPFLAGS) $1 -o $2
endef

define COMPILE
	$(Q) $(CC) $(CFLAGS) $($(strip $1)_CFLAGS) ${shell echo $1 | sed -e "s/\//\\/g"}
endef

define ASSEMBLE
	$(Q) $(AS) $(AFLAGS) $($(strip $1)_AFLAGS) ${shell echo $1 | sed -e "s/\//\\/g"}
endef

define MOVEOBJ
	$(call MOVEFILE, "$1.obj", "$2$(DELIM)$1.obj")
	$(call MOVEFILE, "$1.lst", "$2$(DELIM)$1.lst")
	$(call MOVEFILE, "$1.src", "$2$(DELIM)$1.src")
endef

define ARCHIVE
	for %%G in ($(2)) do ( $(AR) $(ARFLAGS) $1=-+%%G )
endef

define CLEAN
	$(Q) if exist *.obj (del /f /q *.obj)
	$(Q) if exist *.src (del /f /q *.src)
	$(Q) if exist *.lib (del /f /q *.lib)
	$(Q) if exist *.hex (del /f /q *.hex)
	$(Q) if exist *.lod (del /f /q *.lod)
	$(Q) if exist *.lst (del /f /q *.lst)
endef

else

define PREPROCESS
	@echo "CPP: $1->$2"
	$(Q) $(CPP) $(CPPFLAGS) $($(strip $1)_CPPFLAGS) $1 -o $2
endef

define COMPILE
	$(Q) $(CC) $(CFLAGS) $($(strip $1)_CFLAGS) `cygpath -w "$1"`
endef

define ASSEMBLE
	$(Q) $(AS) $(AFLAGS) $($(strip $1)_AFLAGS) `cygpath -w "$1"`
endef

define MOVEOBJ
	$(call MOVEFILE, "$1.obj", "$2$(DELIM)$1.obj")
	$(call MOVEFILE, "$1.lst", "$2$(DELIM)$1.lst")
	$(call MOVEFILE, "$1.src", "$2$(DELIM)$1.src")
endef

define ARCHIVE
	for __obj in $(2) ; do \
		$(AR) $(ARFLAGS) $1=-+$$__obj \
	done
endef

define CLEAN
	$(Q) rm -f *.obj *.src *.lib *.hex *.lod *.lst
endef
endif

# Windows native host tool definitions

ifeq ($(CONFIG_WINDOWS_NATIVE),y)
  HOSTCC = mingw32-gcc.exe
  HOSTINCLUDES = -I.
  HOSTCFLAGS = -Wall -Wstrict-prototypes -Wshadow -Wundef -g -pipe
  HOSTLDFLAGS =
  HOSTEXEEXT = .exe

  # Windows-native host tools

  #MKDEP = $(TOPDIR)\tools\mkdeps.exe --winnative
  MKDEP = $(TOPDIR)$(DELIM)tools$(DELIM)mknulldeps.sh
else

# Linux/Cygwin host tool definitions

  HOSTCC = gcc
  HOSTINCLUDES = -I.
  HOSTCFLAGS = -Wall -Wstrict-prototypes -Wshadow -Wundef -g -pipe
  HOSTLDFLAGS =

  # This is the tool to use for dependencies (i.e., none)

  MKDEP = $(TOPDIR)$(DELIM)tools$(DELIM)mknulldeps.sh

  # ZDS-II cannot follow Cygwin soft links, so we will have to use directory copies

  DIRLINK = $(TOPDIR)$(DELIM)tools$(DELIM)copydir.sh
  DIRUNLINK = $(TOPDIR)$(DELIM)tools$(DELIM)unlink.sh
endif
