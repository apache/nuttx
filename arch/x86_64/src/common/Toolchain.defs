############################################################################
# arch/x86_64/src/common/Toolchain.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

# NuttX is sometimes built as a native target.
# In that case, the __NuttX__ macro is predefined by the compiler.
# https://github.com/NuttX/buildroot
#
# In other cases, __NuttX__ is an ordinary user-definded macro.
# It's especially the case for NuttX sim, which is a target to run
# the entire NuttX as a program on the host OS, which can be Linux,
# macOS, Windows, etc.
# https://cwiki.apache.org/confluence/display/NUTTX/NuttX+Simulation
# In that case, the host OS compiler is used to build NuttX.
# Thus, eg. NuttX sim on macOS is built with __APPLE__.
# We #undef predefined macros for those possible host OSes here
# because the OS APIs this library should use are of NuttX,
# not the host OS.

ARCHDEFINES += -U_AIX -U_WIN32 -U__APPLE__ -U__FreeBSD__
ARCHDEFINES += -U__NetBSD__ -U__linux__ -U__sun__ -U__unix__
ARCHDEFINES += -U__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHOPTIMIZATION = $(CONFIG_DEBUG_SYMBOLS_LEVEL)
endif

ifeq ($(CONFIG_DEBUG_NOOPT),y)
  ARCHOPTIMIZATION += -O0
else ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  ARCHOPTIMIZATION += $(CONFIG_DEBUG_OPTLEVEL)
else ifeq ($(CONFIG_DEBUG_FULLOPT),y)
  ARCHOPTIMIZATION += -Os
endif

ifeq ($(CONFIG_FRAME_POINTER),y)
  ARCHOPTIMIZATION += -fno-omit-frame-pointer -fno-optimize-sibling-calls
endif

ifeq ($(CONFIG_ARCH_INTEL64_DISABLE_CET),y)
  ARCHOPTIMIZATION += -fcf-protection=none
endif

ifeq ($(CONFIG_ARCH_INTEL64_DISABLE_VECTORIZE),y)
  ARCHOPTIMIZATION += -fno-tree-vectorize
endif

ARCHCFLAGS += -fno-common -Wno-attributes
ARCHCXXFLAGS += -fno-common -Wno-attributes -nostdinc++

ARCHCPUFLAGS = -fno-pic -mcmodel=large -mno-red-zone -mrdrnd
ARCHPICFLAGS = -fPIC
ARCHWARNINGS = -Wall -Wstrict-prototypes -Wshadow -Wundef

# We have to use a cross-development toolchain under Cygwin because the native
# Cygwin toolchains don't generate ELF binaries.

ifeq ($(CONFIG_WINDOWS_CYGWIN),y)
CROSSDEV = i486-nuttx-elf-
endif

ifeq ($(CONFIG_HOST_MACOS),y)
CROSSDEV = x86_64-elf-
endif

ifneq ($(CONFIG_CXX_STANDARD),)
  ARCHCXXFLAGS += -std=$(CONFIG_CXX_STANDARD)
endif

ifeq ($(CONFIG_STACK_CANARIES),y)
  ARCHOPTIMIZATION += -fstack-protector-all
else
  ARCHOPTIMIZATION += -fno-stack-protector
endif

ifneq ($(CONFIG_CXX_EXCEPTION),y)
  ARCHCXXFLAGS += -fno-exceptions -fcheck-new
endif

ifneq ($(CONFIG_CXX_RTTI),y)
  ARCHCXXFLAGS += -fno-rtti
endif

ifeq ($(CONFIG_DEBUG_OPT_UNUSED_SECTIONS),y)
  LDFLAGS          += --gc-sections
  ARCHOPTIMIZATION += -ffunction-sections -fdata-sections
endif

ifeq ($(CONFIG_DEBUG_LINK_WHOLE_ARCHIVE),y)
  LDFLAGS += --whole-archive
endif

ifeq ($(CONFIG_HOST_LINUX),y)
  LDFLAGS += -z noexecstack
endif

ifeq ($(CONFIG_LIBCXX),y)
  # Linux C++ ABI seems vary.
  # Probably __GLIBCXX__ is the best bet.
  # XXX what to do for windows?

  CXXFLAGS += -D__GLIBCXX__

  # Disable availability macros.
  # The availability on Host OS is not likely appropriate for NuttX.
  #
  # Note: When compiling NuttX apps, we undefine __APPLE__.
  # It makes libcxx __availability header unhappy.
  # https://github.com/llvm/llvm-project/blob/2e2999cd44f6ec9a5e396fa0113497ea82582f69/libcxx/include/__availability#L258

  CXXFLAGS += -D_LIBCPP_DISABLE_AVAILABILITY
endif

CC = $(CROSSDEV)gcc
CXX = $(CROSSDEV)g++
CPP = $(CROSSDEV)gcc -E -x c
LD = $(CROSSDEV)ld
STRIP = $(CROSSDEV)strip --strip-unneeded
AR = $(CROSSDEV)ar rcs
NM = $(CROSSDEV)nm
OBJCOPY = $(CROSSDEV)objcopy
OBJDUMP = $(CROSSDEV)objdump

ifeq ($(CONFIG_ARCH_TOOLCHAIN_GNU),y)
  ifeq ($(CONFIG_ARCH_TOOLCHAIN_CLANG),)
    ifeq ($(GCCVER),)
      export GCCVER := $(shell $(CC) --version | grep gcc | sed -E "s/.* ([0-9]+\.[0-9]+).*/\1/" | cut -d'.' -f1)
    endif
  endif
endif

ifeq ($(CONFIG_ARCH_X86_64_SSE3),y)
  ARCHCPUFLAGS += -msse3
endif

ifeq ($(CONFIG_ARCH_X86_64_SSSE3),y)
  ARCHCPUFLAGS += -mssse3
endif

ifeq ($(CONFIG_ARCH_X86_64_SSE41),y)
  ARCHCPUFLAGS += -msse4.1
endif

ifeq ($(CONFIG_ARCH_X86_64_SSE42),y)
  ARCHCPUFLAGS += -msse4.2
endif

ifeq ($(CONFIG_ARCH_X86_64_SSE4A),y)
  ARCHCPUFLAGS += -msse4a
endif

ifeq ($(CONFIG_ARCH_X86_64_FMA),y)
  ARCHCPUFLAGS += -mfma
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX),y)
  ARCHCPUFLAGS += -mavx
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512),y)
  ARCHCPUFLAGS += -mavx512f
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512PF),y)
  ARCHCPUFLAGS += -mavx512pf
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512ER),y)
  ARCHCPUFLAGS += -mavx512er
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512CD),y)
  ARCHCPUFLAGS += -mavx512cd
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512VL),y)
  ARCHCPUFLAGS += -mavx512vl
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512BW),y)
  ARCHCPUFLAGS += -mavx512bw
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512DQ),y)
  ARCHCPUFLAGS += -mavx512dq
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512IFMA),y)
  ARCHCPUFLAGS += -mavx512ifma
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512VBMI),y)
  ARCHCPUFLAGS += -mavx512vbmi
endif

CFLAGS := $(ARCHWARNINGS) $(ARCHOPTIMIZATION) $(ARCHCPUFLAGS) $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
CXXFLAGS := $(ARCHOPTIMIZATION) $(ARCHCXXFLAGS) $(ARCHXXINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
CPPFLAGS := $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
AFLAGS := $(CFLAGS) -D__ASSEMBLY__

ifeq ($(CONFIG_HOST_MACOS),y)
AFLAGS += -Wa,--divide
endif

# Loadable module definitions

CMODULEFLAGS = $(CFLAGS) -fvisibility=hidden
LDMODULEFLAGS = -r -T $(call CONVERT_PATH,$(TOPDIR)/libs/libc/modlib/gnu-elf.ld)

# ELF module definitions

CELFFLAGS = $(CFLAGS) -fvisibility=hidden
CXXELFFLAGS = $(CXXFLAGS) -fvisibility=hidden

LDELFFLAGS = -r -e main --gc-sections
LDELFFLAGS += -T $(call CONVERT_PATH,$(TOPDIR)$(DELIM)libs$(DELIM)libc$(DELIM)modlib$(DELIM)gnu-elf.ld)

# -fno-pic to avoid GOT relocations
# -mcmodel=large to avoid out-of-range 32-bit relocations

CMODULEFLAGS += -fno-pic -mcmodel=large
CELFFLAGS += -fno-pic -mcmodel=large
CXXELFFLAGS += -fno-pic -mcmodel=large
