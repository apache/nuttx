############################################################################
# arch/x86_64/src/common/Toolchain.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHOPTIMIZATION = -g
endif

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  ARCHOPTIMIZATION += $(CONFIG_DEBUG_OPTLEVEL)
else ifeq ($(CONFIG_DEBUG_FULLOPT),y)
  ARCHOPTIMIZATION += -Os
endif

ARCHCPUFLAGS = -fPIC -fno-stack-protector -mno-red-zone -mrdrnd
ARCHPICFLAGS = -fPIC
ARCHWARNINGS = -Wall -Wstrict-prototypes -Wshadow -Wundef

# We have to use a cross-development toolchain under Cygwin because the native
# Cygwin toolchains don't generate ELF binaries.

ifeq ($(CONFIG_WINDOWS_CYGWIN),y)
CROSSDEV = i486-nuttx-elf-
endif

ifeq ($(CONFIG_HOST_MACOS),y)
CROSSDEV = x86_64-elf-
endif

ifeq ($(CONFIG_DEBUG_LINK_WHOLE_ARCHIVE),y)
  LDFLAGS += --whole-archive
endif

CC = $(CROSSDEV)gcc
CPP = $(CROSSDEV)gcc -E -x c
LD = $(CROSSDEV)ld
STRIP = $(CROSSDEV)strip --strip-unneeded
AR = $(CROSSDEV)ar rcs
NM = $(CROSSDEV)nm
OBJCOPY = $(CROSSDEV)objcopy
OBJDUMP = $(CROSSDEV)objdump

ifeq ($(CONFIG_ARCH_X86_64_SSE3),y)
  ARCHCPUFLAGS += -msse3
endif

ifeq ($(CONFIG_ARCH_X86_64_SSSE3),y)
  ARCHCPUFLAGS += -mssse3
endif

ifeq ($(CONFIG_ARCH_X86_64_SSE41),y)
  ARCHCPUFLAGS += -msse4.1
endif

ifeq ($(CONFIG_ARCH_X86_64_SSE42),y)
  ARCHCPUFLAGS += -msse4.2
endif

ifeq ($(CONFIG_ARCH_X86_64_SSE4A),y)
  ARCHCPUFLAGS += -msse4a
endif

ifeq ($(CONFIG_ARCH_X86_64_FMA),y)
  ARCHCPUFLAGS += -mfma
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX),y)
  ARCHCPUFLAGS += -mavx
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512),y)
  ARCHCPUFLAGS += -mavx512f
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512PF),y)
  ARCHCPUFLAGS += -mavx512pf
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512ER),y)
  ARCHCPUFLAGS += -mavx512er
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512CD),y)
  ARCHCPUFLAGS += -mavx512cd
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512VL),y)
  ARCHCPUFLAGS += -mavx512vl
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512BW),y)
  ARCHCPUFLAGS += -mavx512bw
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512DQ),y)
  ARCHCPUFLAGS += -mavx512dq
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512IFMA),y)
  ARCHCPUFLAGS += -mavx512ifma
endif

ifeq ($(CONFIG_ARCH_X86_64_AVX512VBMI),y)
  ARCHCPUFLAGS += -mavx512vbmi
endif


CFLAGS := $(ARCHWARNINGS) $(ARCHOPTIMIZATION) $(ARCHCPUFLAGS) $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
CPPFLAGS := $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
AFLAGS := $(CFLAGS) -D__ASSEMBLY__

ifeq ($(CONFIG_HOST_MACOS),y)
AFLAGS += -Wa,--divide
endif

EXEEXT = .elf

# Loadable module definitions

CMODULEFLAGS = $(CFLAGS) -fvisibility=hidden
LDMODULEFLAGS = -r -T $(call CONVERT_PATH,$(TOPDIR)/libs/libc/modlib/gnu-elf.ld)

# ELF module definitions

CELFFLAGS = $(CFLAGS) -fvisibility=hidden
CXXELFFLAGS = $(CXXFLAGS) -fvisibility=hidden

LDELFFLAGS = -r -e main --gc-sections
LDELFFLAGS += -T $(call CONVERT_PATH,$(TOPDIR)$(DELIM)binfmt$(DELIM)libelf$(DELIM)gnu-elf.ld)

# -fno-pic to avoid GOT relocations
# -mcmodel=large to avoid out-of-range 32-bit relocations

CMODULEFLAGS += -fno-pic -mcmodel=large
CELFFLAGS += -fno-pic -mcmodel=large
CXXELFFLAGS += -fno-pic -mcmodel=large
