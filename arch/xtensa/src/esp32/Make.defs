############################################################################
# arch/xtensa/src/esp32/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

# The start-up, "head", file.  May be either a .S or a .c file.

HEAD_ASRC  = xtensa_vectors.S xtensa_window_vector.S xtensa_windowspill.S
HEAD_ASRC += xtensa_int_handlers.S  xtensa_user_handler.S
HEAD_CSRC  = esp32_start.c

# Common XTENSA files (arch/xtensa/src/common)

CMN_ASRCS  = xtensa_context.S xtensa_coproc.S xtensa_cpuint.S xtensa_panic.S
CMN_ASRCS += xtensa_sigtramp.S

CMN_CSRCS  = xtensa_assert.c xtensa_blocktask.c xtensa_copystate.c
CMN_CSRCS += xtensa_cpenable.c xtensa_createstack.c xtensa_exit.c
CMN_CSRCS += xtensa_initialize.c xtensa_initialstate.c xtensa_interruptcontext.c
CMN_CSRCS += xtensa_irqdispatch.c xtensa_lowputs.c xtensa_mdelay.c
CMN_CSRCS += xtensa_modifyreg8.c xtensa_modifyreg16.c xtensa_modifyreg32.c
CMN_CSRCS += xtensa_puts.c xtensa_releasepending.c xtensa_releasestack.c
CMN_CSRCS += xtensa_reprioritizertr.c xtensa_schedsigaction.c
CMN_CSRCS += xtensa_sigdeliver.c xtensa_stackframe.c xtensa_udelay.c
CMN_CSRCS += xtensa_unblocktask.c xtensa_usestack.c
CMN_CSRCS += esp32_systemreset.c esp32_resetcause.c

# Configuration-dependent common XTENSA files

ifneq ($(CONFIG_ARCH_IDLE_CUSTOM),y)
  CMN_CSRCS += esp32_idle.c
endif

ifeq ($(CONFIG_DEBUG_ALERT),y)
  CMN_CSRCS += xtensa_dumpstate.c
endif

ifeq ($(CONFIG_XTENSA_DUMPBT_ON_ASSERT),y)
  CMN_ASRCS += xtensa_backtrace.S
endif

ifeq ($(CONFIG_SPINLOCK),y)
  CMN_CSRCS += xtensa_testset.c
endif

ifeq ($(CONFIG_SMP),y)
  CMN_CSRCS += xtensa_cpupause.c
endif

ifeq ($(CONFIG_STACK_COLORATION),y)
  CMN_CSRCS += xtensa_checkstack.c
endif

ifeq ($(CONFIG_FS_HOSTFS),y)
  CMN_ASRCS += xtensa_simcall.S
  CMN_CSRCS += xtensa_hostfs.c
endif

# Required ESP32 files (arch/xtensa/src/lx6)

CHIP_CSRCS  = esp32_allocateheap.c esp32_clockconfig.c esp32_cpuint.c
CHIP_CSRCS += esp32_gpio.c esp32_intdecode.c esp32_irq.c esp32_region.c
CHIP_CSRCS += esp32_timerisr.c
CHIP_CSRCS += esp32_user.c
CHIP_CSRCS += esp32_dma.c

ifeq ($(CONFIG_PM),y)
ifneq ($(CONFIG_ARCH_CUSTOM_PMINIT),y)
CHIP_CSRCS += esp32_pminitialize.c
endif
CHIP_CSRCS += esp32_pm.c
endif

CHIP_CSRCS += esp32_rtc.c

ifeq ($(CONFIG_XTENSA_IMEM_USE_SEPARATE_HEAP),y)
CHIP_CSRCS += esp32_imm.c
endif

ifeq ($(CONFIG_ESP32_I2C),y)
CHIP_CSRCS += esp32_i2c.c
endif

ifeq ($(CONFIG_ESP32_SPI),y)
CHIP_CSRCS += esp32_spi.c
  ifeq ($(CONFIG_SPI_SLAVE),y)
    CHIP_CSRCS += esp32_spi_slave.c
  endif
endif

# SPIFLASH and SPIRAM need spicache.c

ifeq ($(CONFIG_ESP32_SPIFLASH),y)
CHIP_CSRCS += esp32_spicache.c
else ifeq ($(CONFIG_ESP32_SPIRAM),y)
CHIP_CSRCS += esp32_spicache.c
endif

ifeq ($(CONFIG_ESP32_SPIFLASH),y)
CHIP_CSRCS += esp32_spiflash.c
endif

ifeq ($(CONFIG_ESP32_SPIRAM),y)
CHIP_CSRCS += esp32_spiram.c
CHIP_CSRCS += esp32_psram.c
CHIP_CSRCS += esp32_himem.c
endif

ifeq ($(CONFIG_ESP32_EFUSE),y)
CHIP_CSRCS += esp32_efuse.c
CHIP_CSRCS += esp32_efuse_table.c
CHIP_CSRCS += esp32_efuse_lowerhalf.c
endif

ifeq ($(CONFIG_ESP32_EMAC),y)
CHIP_CSRCS += esp32_emac.c
endif

# Configuration-dependent ESP32 files

ifeq ($(CONFIG_SMP),y)
CHIP_ASRCS  = esp32_cpuindex.S
CMN_CSRCS  += esp32_cpuidlestack.c esp32_cpustart.c esp32_intercpu_interrupt.c
endif

ifeq ($(CONFIG_ESP32_UART),y)
CMN_CSRCS += esp32_serial.c
endif

ifeq ($(CONFIG_ESP32_RNG),y)
CMN_CSRCS += esp32_rng.c
endif

ifeq ($(CONFIG_ESP32_TIMER),y)
CHIP_CSRCS += esp32_tim.c
ifeq ($(CONFIG_TIMER),y)
CHIP_CSRCS += esp32_tim_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_ONESHOT),y)
CHIP_CSRCS += esp32_oneshot.c
ifeq ($(CONFIG_ONESHOT),y)
CHIP_CSRCS += esp32_oneshot_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_PARTITION),y)
CHIP_CSRCS += esp32_partition.c
endif

ifeq ($(CONFIG_ESP32_WDT),y)
CHIP_CSRCS += esp32_wdt.c
ifeq ($(CONFIG_WATCHDOG),y)
CHIP_CSRCS += esp32_wdt_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ARCH_USE_MODULE_TEXT),y)
CHIP_CSRCS += esp32_modtext.c
CMN_ASRCS += xtensa_loadstore.S
endif

ifeq ($(CONFIG_ESP32_RT_TIMER),y)
CHIP_CSRCS += esp32_rt_timer.c
endif

ifeq ($(CONFIG_ESP32_AES_ACCELERATOR),y)
CHIP_CSRCS += esp32_aes.c
endif

ifeq ($(CONFIG_ESP32_WIRELESS),y)
WIRELESS_DRV_UNPACK  = esp-wireless-drivers-3rdparty
WIRELESS_DRV_ID      = e766ea3
WIRELESS_DRV_ZIP     = $(WIRELESS_DRV_ID).zip
WIRELESS_DRV_URL     = https://github.com/espressif/esp-wireless-drivers-3rdparty/archive

$(WIRELESS_DRV_ZIP):
	$(Q) echo "Downloading: ESP Wireless Drivers"
	$(Q) curl -L $(WIRELESS_DRV_URL)/$(WIRELESS_DRV_ZIP) -o chip/$(WIRELESS_DRV_ZIP)

chip/$(WIRELESS_DRV_UNPACK): $(WIRELESS_DRV_ZIP)
	$(Q) echo "Unpacking: ESP Wireless Drivers"
	$(Q) unzip -oqq chip/$(WIRELESS_DRV_ZIP) -d chip/
	$(Q) mv chip/$(WIRELESS_DRV_UNPACK)-$(WIRELESS_DRV_ID)* chip/$(WIRELESS_DRV_UNPACK)
	$(Q) touch chip/$(WIRELESS_DRV_UNPACK)

context:: chip/$(WIRELESS_DRV_UNPACK)

clean_context::
	$(call DELFILE, chip/$(WIRELESS_DRV_ZIP))
	$(call DELDIR, chip/$(WIRELESS_DRV_UNPACK))

INCLUDES += $(shell $(INCDIR) "$(CC)" $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)esp-wireless-drivers-3rdparty$(DELIM)include)
INCLUDES += $(shell $(INCDIR) "$(CC)" $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)esp-wireless-drivers-3rdparty$(DELIM)include$(DELIM)esp32)
CHIP_CSRCS += esp32_wlan.c esp32_wifi_utils.c esp32_wifi_adapter.c

EXTRA_LIBPATHS += -L $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)esp-wireless-drivers-3rdparty$(DELIM)libs$(DELIM)esp32
EXTRA_LIBS += -lcore -lrtc -lnet80211 -lpp -lsmartconfig -lcoexist -lespnow -lphy -lwpa_supplicant

# Due to some Wi-Fi related libraries, the option is need to avoid linking too much
# unused functions.

LDFLAGS += --gc-sections
endif
