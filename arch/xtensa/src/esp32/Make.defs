############################################################################
# arch/xtensa/src/esp32/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

include common/Make.defs

# The start-up, "head", file.  May be either a .S or a .c file.

HEAD_CSRC  = esp32_start.c esp32_wdt.c

ifeq ($(CONFIG_XTENSA_HAVE_WINDOW_EXCEPTION_HOOKS),y)
HEAD_ASRC += esp32_window_hooks.S
endif

# Required ESP32 files (arch/xtensa/src/esp32)

CHIP_CSRCS  = esp32_allocateheap.c esp32_clockconfig.c esp32_gpio.c
CHIP_CSRCS += esp32_systemreset.c esp32_resetcause.c
CHIP_CSRCS += esp32_irq.c esp32_region.c esp32_rtc_gpio.c
CHIP_CSRCS += esp32_user.c esp32_libc_stubs.c
CHIP_CSRCS += esp32_dma.c

ifneq ($(CONFIG_ARCH_IDLE_CUSTOM),y)
CHIP_CSRCS += esp32_idle.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
CHIP_CSRCS += esp32_userspace.c
endif

ifeq ($(CONFIG_SCHED_TICKLESS),y)
CHIP_CSRCS += esp32_tickless.c
else
CHIP_CSRCS += esp32_timerisr.c
endif

ifeq ($(CONFIG_PM),y)
ifneq ($(CONFIG_ARCH_CUSTOM_PMINIT),y)
CHIP_CSRCS += esp32_pminitialize.c
endif
CHIP_CSRCS += esp32_pm.c
endif

ifeq ($(CONFIG_XTENSA_IMEM_USE_SEPARATE_HEAP),y)
CHIP_CSRCS += esp32_imm.c
endif

ifeq ($(CONFIG_DAC),y)
CHIP_CSRCS += esp32_dac.c
endif

ifeq ($(CONFIG_ESP32_LEDC),y)
CHIP_CSRCS += esp32_ledc.c
endif

ifeq ($(CONFIG_ESP32_I2C),y)
CHIP_CSRCS += esp32_i2c.c
endif

ifeq ($(CONFIG_ESP32_I2S),y)
CHIP_CSRCS += esp32_i2s.c
endif

ifeq ($(CONFIG_ESP32_TWAI),y)
CHIP_CSRCS += esp32_twai.c
endif

ifeq ($(CONFIG_ESP32_PCNT_AS_QE),y)
CHIP_CSRCS += esp32_qencoder.c
endif

ifeq ($(CONFIG_ESP32_SPI),y)
CHIP_CSRCS += esp32_spi.c
ifeq ($(CONFIG_SPI_SLAVE),y)
CHIP_CSRCS += esp32_spi_slave.c
endif
endif

# SPIFLASH and SPIRAM need spicache.c

ifeq ($(CONFIG_ESP32_SPIFLASH),y)
CHIP_CSRCS += esp32_spicache.c
else ifeq ($(CONFIG_ESP32_SPIRAM),y)
CHIP_CSRCS += esp32_spicache.c
endif

ifeq ($(CONFIG_ESP32_SPIFLASH),y)
CHIP_CSRCS += esp32_spiflash.c
endif

ifeq ($(CONFIG_ESP32_SPIRAM),y)
CHIP_CSRCS += esp32_spiram.c
CHIP_CSRCS += esp32_psram.c
CHIP_CSRCS += esp32_himem.c
CHIP_CSRCS += esp32_himem_chardev.c
endif

CHIP_CSRCS += esp32_efuse.c
ifeq ($(CONFIG_ESP32_EFUSE),y)
CHIP_CSRCS += esp32_efuse_lowerhalf.c
endif

ifeq ($(CONFIG_ESP32_EMAC),y)
CHIP_CSRCS += esp32_emac.c
endif

# Configuration-dependent ESP32 files

ifeq ($(CONFIG_SMP),y)
CHIP_ASRCS  = esp32_cpuindex.S
CHIP_CSRCS += esp32_cpuidlestack.c esp32_cpustart.c esp32_intercpu_interrupt.c
endif

ifeq ($(CONFIG_ESP32_UART),y)
CHIP_CSRCS += esp32_serial.c
endif

ifeq ($(CONFIG_ESP32_RNG),y)
CHIP_CSRCS += esp32_rng.c
endif

ifeq ($(CONFIG_ESP32_TIMER),y)
CHIP_CSRCS += esp32_tim.c
ifeq ($(CONFIG_TIMER),y)
CHIP_CSRCS += esp32_tim_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_ONESHOT),y)
CHIP_CSRCS += esp32_oneshot.c
ifeq ($(CONFIG_ONESHOT),y)
CHIP_CSRCS += esp32_oneshot_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_FREERUN),y)
CHIP_CSRCS += esp32_freerun.c
endif

ifeq ($(CONFIG_ESP32_PARTITION_TABLE),y)
CHIP_CSRCS += esp32_partition.c
endif

ifeq ($(CONFIG_WATCHDOG),y)
CHIP_CSRCS += esp32_wdt_lowerhalf.c
endif

ifeq ($(CONFIG_ARCH_HAVE_EXTRA_HEAPS),y)
CHIP_CSRCS += esp32_extraheaps.c
endif

ifeq ($(CONFIG_ESP32_RTC_HEAP),y)
CHIP_CSRCS += esp32_rtcheap.c
endif

ifeq ($(CONFIG_ESP32_IRAM_HEAP),y)
CHIP_CSRCS += esp32_iramheap.c
endif

ifeq ($(CONFIG_ARCH_USE_TEXT_HEAP),y)
CHIP_CSRCS += esp32_textheap.c
endif

ifeq ($(CONFIG_ESP32_RT_TIMER),y)
CHIP_CSRCS += esp32_rt_timer.c
endif

ifeq ($(CONFIG_ESP32_TOUCH),y)
CHIP_CSRCS += esp32_touch.c
endif

ifeq ($(CONFIG_ESP32_AES_ACCELERATOR),y)
CHIP_CSRCS += esp32_aes.c
endif

ifeq ($(CONFIG_ESP32_RTC),y)
CHIP_CSRCS += esp32_rtc.c
ifeq ($(CONFIG_RTC_DRIVER),y)
CHIP_CSRCS += esp32_rtc_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_OPENETH),y)
CHIP_CSRCS += esp32_openeth.c
endif

#############################################################################
# Espressif HAL for 3rd Party Platforms
#############################################################################

# Fetch source files and add them to build

ESP_HAL_3RDPARTY_REPO   = esp-hal-3rdparty
ifndef ESP_HAL_3RDPARTY_VERSION
	ESP_HAL_3RDPARTY_VERSION = 966f1bbf7d80d3fac9a43f414e864985cbcfd680
endif

ifndef ESP_HAL_3RDPARTY_URL
	ESP_HAL_3RDPARTY_URL = https://github.com/espressif/esp-hal-3rdparty.git
endif

chip/$(ESP_HAL_3RDPARTY_REPO):
	$(Q) echo "Cloning Espressif HAL for 3rd Party Platforms"
	$(Q) git clone --quiet $(ESP_HAL_3RDPARTY_URL) chip/$(ESP_HAL_3RDPARTY_REPO)
	$(Q) echo "Espressif HAL for 3rd Party Platforms: ${ESP_HAL_3RDPARTY_VERSION}"
	$(Q) git -C chip/$(ESP_HAL_3RDPARTY_REPO) checkout --quiet $(ESP_HAL_3RDPARTY_VERSION)

# Silent preprocessor warnings

CFLAGS += -Wno-undef -Wno-unused-variable

# Files that require the HAL recipe

CHIP_SERIES = $(patsubst "%",%,$(CONFIG_ESPRESSIF_CHIP_SERIES))

include chip/Bootloader.mk

include chip/hal.mk

include common/espressif/Make.defs

context:: chip/$(ESP_HAL_3RDPARTY_REPO)
ifeq ($(CONFIG_ESP32_WIRELESS),y)
	$(Q) echo "Espressif HAL for 3rd Party Platforms: initializing submodules..."
	$(Q) git -C chip/$(ESP_HAL_3RDPARTY_REPO) submodule --quiet update --init --depth=1 components/mbedtls/mbedtls components/esp_phy/lib components/esp_wifi/lib components/bt/controller/lib_esp32 components/esp_coex/lib
	$(Q) git -C chip/$(ESP_HAL_3RDPARTY_REPO)/components/mbedtls/mbedtls reset --quiet --hard
	$(Q) echo "Applying patches..."
	$(Q) cd chip/$(ESP_HAL_3RDPARTY_REPO)/components/mbedtls/mbedtls && git apply ../../../nuttx/patches/components/mbedtls/mbedtls/*.patch
endif

distclean::
	$(call DELDIR, chip/$(ESP_HAL_3RDPARTY_REPO))

ifeq ($(CONFIG_ESP32_WIRELESS),y)
include chip/Wireless.mk
endif

distclean::
	$(call DELDIR,chip/$(ESP_HAL_3RDPARTY_REPO))

INCLUDES += ${INCDIR_PREFIX}$(ARCH_SRCDIR)$(DELIM)common$(DELIM)espressif
