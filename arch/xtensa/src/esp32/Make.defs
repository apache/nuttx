############################################################################
# arch/xtensa/src/esp32/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

include chip/Bootloader.mk
include common/Make.defs

# The start-up, "head", file.  May be either a .S or a .c file.

HEAD_CSRC  = esp32_start.c esp32_wdt.c

ifeq ($(CONFIG_XTENSA_HAVE_WINDOW_EXCEPTION_HOOKS),y)
HEAD_ASRC += esp32_window_hooks.S
endif

# Required ESP32 files (arch/xtensa/src/esp32)

CHIP_CSRCS  = esp32_allocateheap.c esp32_clockconfig.c esp32_gpio.c
CHIP_CSRCS += esp32_systemreset.c esp32_resetcause.c
CHIP_CSRCS += esp32_irq.c esp32_region.c esp32_rtc_gpio.c
CHIP_CSRCS += esp32_user.c esp32_libc_stubs.c
CHIP_CSRCS += esp32_dma.c

ifneq ($(CONFIG_ARCH_IDLE_CUSTOM),y)
CHIP_CSRCS += esp32_idle.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
CHIP_CSRCS += esp32_userspace.c
endif

ifeq ($(CONFIG_SCHED_TICKLESS),y)
CHIP_CSRCS += esp32_tickless.c
else
CHIP_CSRCS += esp32_timerisr.c
endif

ifeq ($(CONFIG_PM),y)
ifneq ($(CONFIG_ARCH_CUSTOM_PMINIT),y)
CHIP_CSRCS += esp32_pminitialize.c
endif
CHIP_CSRCS += esp32_pm.c
endif

ifeq ($(CONFIG_XTENSA_IMEM_USE_SEPARATE_HEAP),y)
CHIP_CSRCS += esp32_imm.c
endif

ifeq ($(CONFIG_ESP32_LEDC),y)
CHIP_CSRCS += esp32_ledc.c
endif

ifeq ($(CONFIG_ESP32_I2C),y)
CHIP_CSRCS += esp32_i2c.c
endif

ifeq ($(CONFIG_ESP32_I2S),y)
CHIP_CSRCS += esp32_i2s.c
endif

ifeq ($(CONFIG_ESP32_TWAI),y)
CHIP_CSRCS += esp32_twai.c
endif

ifeq ($(CONFIG_ESP32_PCNT_AS_QE),y)
CHIP_CSRCS += esp32_qencoder.c
endif

ifeq ($(CONFIG_ESP32_RMT),y)
CHIP_CSRCS += esp32_rmt.c
endif

ifeq ($(CONFIG_ESP32_SPI),y)
CHIP_CSRCS += esp32_spi.c
ifeq ($(CONFIG_SPI_SLAVE),y)
CHIP_CSRCS += esp32_spi_slave.c
endif
endif

# SPIFLASH and SPIRAM need spicache.c

ifeq ($(CONFIG_ESP32_SPIFLASH),y)
CHIP_CSRCS += esp32_spicache.c
else ifeq ($(CONFIG_ESP32_SPIRAM),y)
CHIP_CSRCS += esp32_spicache.c
endif

ifeq ($(CONFIG_ESP32_SPIFLASH),y)
CHIP_CSRCS += esp32_spiflash.c
endif

ifeq ($(CONFIG_ESP32_SPIRAM),y)
CHIP_CSRCS += esp32_spiram.c
CHIP_CSRCS += esp32_psram.c
CHIP_CSRCS += esp32_himem.c
CHIP_CSRCS += esp32_himem_chardev.c
endif

ifeq ($(CONFIG_ESP32_EFUSE),y)
CHIP_CSRCS += esp32_efuse.c
CHIP_CSRCS += esp32_efuse_table.c
CHIP_CSRCS += esp32_efuse_lowerhalf.c
endif

ifeq ($(CONFIG_ESP32_EMAC),y)
CHIP_CSRCS += esp32_emac.c
endif

# Configuration-dependent ESP32 files

ifeq ($(CONFIG_SMP),y)
CHIP_ASRCS  = esp32_cpuindex.S
CHIP_CSRCS += esp32_cpuidlestack.c esp32_cpustart.c esp32_intercpu_interrupt.c
endif

ifeq ($(CONFIG_ESP32_UART),y)
CHIP_CSRCS += esp32_serial.c
endif

ifeq ($(CONFIG_ESP32_RNG),y)
CHIP_CSRCS += esp32_rng.c
endif

ifeq ($(CONFIG_ESP32_TIMER),y)
CHIP_CSRCS += esp32_tim.c
ifeq ($(CONFIG_TIMER),y)
CHIP_CSRCS += esp32_tim_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_ONESHOT),y)
CHIP_CSRCS += esp32_oneshot.c
ifeq ($(CONFIG_ONESHOT),y)
CHIP_CSRCS += esp32_oneshot_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_FREERUN),y)
CHIP_CSRCS += esp32_freerun.c
endif

ifeq ($(CONFIG_ESP32_PARTITION_TABLE),y)
CHIP_CSRCS += esp32_partition.c
endif

ifeq ($(CONFIG_WATCHDOG),y)
CHIP_CSRCS += esp32_wdt_lowerhalf.c
endif

ifeq ($(CONFIG_ARCH_HAVE_EXTRA_HEAPS),y)
CHIP_CSRCS += esp32_extraheaps.c
endif

ifeq ($(CONFIG_ESP32_RTC_HEAP),y)
CHIP_CSRCS += esp32_rtcheap.c
endif

ifeq ($(CONFIG_ESP32_IRAM_HEAP),y)
CHIP_CSRCS += esp32_iramheap.c
endif

ifeq ($(CONFIG_ARCH_USE_TEXT_HEAP),y)
CHIP_CSRCS += esp32_textheap.c
endif

ifeq ($(CONFIG_ESP32_RT_TIMER),y)
CHIP_CSRCS += esp32_rt_timer.c
endif

ifeq ($(CONFIG_ESP32_TOUCH),y)
CHIP_CSRCS += esp32_touch.c
endif

ifeq ($(CONFIG_ESP32_AES_ACCELERATOR),y)
CHIP_CSRCS += esp32_aes.c
endif

ifeq ($(CONFIG_ESP32_RTC),y)
CHIP_CSRCS += esp32_rtc.c
ifeq ($(CONFIG_RTC_DRIVER),y)
CHIP_CSRCS += esp32_rtc_lowerhalf.c
endif
endif

ifeq ($(CONFIG_ESP32_WIRELESS),y)
WIRELESS_DRV_UNPACK  = esp-wireless-drivers-3rdparty
WIRELESS_DRV_ID      = 45701c0
WIRELESS_DRV_ZIP     = $(WIRELESS_DRV_ID).zip
WIRELESS_DRV_URL     = https://github.com/espressif/esp-wireless-drivers-3rdparty/archive

$(WIRELESS_DRV_ZIP):
	$(call DOWNLOAD,$(WIRELESS_DRV_URL),$(WIRELESS_DRV_ZIP),chip/$(WIRELESS_DRV_ZIP))

chip/$(WIRELESS_DRV_UNPACK): $(WIRELESS_DRV_ZIP)
	$(Q) echo "Unpacking: ESP Wireless Drivers"
	$(Q) unzip -oqq chip/$(WIRELESS_DRV_ZIP) -d chip/
	$(Q) mv chip/$(WIRELESS_DRV_UNPACK)-$(WIRELESS_DRV_ID)* chip/$(WIRELESS_DRV_UNPACK)
	$(Q) touch chip/$(WIRELESS_DRV_UNPACK)

ifeq ($(wildcard chip/$(WIRELESS_DRV_UNPACK)/.git),)
context:: chip/$(WIRELESS_DRV_UNPACK)

distclean::
	$(call DELFILE, chip/$(WIRELESS_DRV_ZIP))
	$(call DELDIR, chip/$(WIRELESS_DRV_UNPACK))
endif

INCLUDES += ${INCDIR_PREFIX}$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)esp-wireless-drivers-3rdparty$(DELIM)include
INCLUDES += ${INCDIR_PREFIX}$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)esp-wireless-drivers-3rdparty$(DELIM)include$(DELIM)esp32

EXTRA_LIBPATHS += -L $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)esp-wireless-drivers-3rdparty$(DELIM)libs$(DELIM)esp32
EXTRA_LIBS += -lphy -lrtc

# Wireless interfaces.

CHIP_CSRCS += esp32_wireless.c
endif

ifeq ($(CONFIG_ESP32_WIFI),y)
CHIP_CSRCS += esp32_wlan.c esp32_wifi_utils.c esp32_wifi_adapter.c
EXTRA_LIBS += -lcore -lnet80211 -lpp -lsmartconfig -lespnow -lwpa_supplicant

ifeq ($(GCCVER),)
  export GCCVER := $(shell $(CC) --version | grep gcc | sed -r 's/.* ([0-9]+\.[0-9]+).*/\1/')
endif
ifeq ($(GCCVER),12.2)
  chip/esp32_wifi_adapter.c_CFLAGS += -Wno-maybe-uninitialized
endif
endif

ifeq ($(CONFIG_ESP32_BLE),y)
CHIP_CSRCS += esp32_ble_adapter.c esp32_ble.c
EXTRA_LIBS += -lbtdm_app
  ifeq ($(CONFIG_ESP32_WIFI_BT_COEXIST),y)
    EXTRA_LIBS += -lcoexist
  endif
endif
