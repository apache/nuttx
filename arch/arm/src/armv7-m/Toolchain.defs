############################################################################
# arch/arm/src/armv7-m/Toolchain.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

# Setup for the selected toolchain

#
# Handle old-style chip-specific toolchain names in the absence of
# a new-style toolchain specification, force the selection of a single
# toolchain and allow the selected toolchain to be overridden by a
# command-line selection.
#

ifeq ($(filter y, \
      $(CONFIG_ARMV7M_TOOLCHAIN_BUILDROOT) \
    ),y)
  CONFIG_ARMV7M_TOOLCHAIN ?= BUILDROOT
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7M_TOOLCHAIN_GNU_EABI) \
    ),y)
  CONFIG_ARMV7M_TOOLCHAIN ?= GNU_EABI
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7M_TOOLCHAIN_CLANG) \
    ),y)
  CONFIG_ARMV7M_TOOLCHAIN ?= CLANG
endif

#
# Supported toolchains
#
# Each toolchain definition should set:
#
#  CROSSDEV         The GNU toolchain triple (command prefix)
#  ARCHCPUFLAGS     CPU-specific flags selecting the instruction set
#                   FPU options, etc.
#  MAXOPTIMIZATION  The maximum optimization level that results in
#                   reliable code generation.
#

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  MAXOPTIMIZATION := $(CONFIG_DEBUG_OPTLEVEL)
else ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),CLANG)
  MAXOPTIMIZATION ?= -Oz
else
  MAXOPTIMIZATION ?= -Os
endif

ifeq ($(CONFIG_FRAME_POINTER),y)
  MAXOPTIMIZATION += -fno-omit-frame-pointer -fno-optimize-sibling-calls
else
  MAXOPTIMIZATION += -fomit-frame-pointer
endif

# Parametrization for ARCHCPUFLAGS

ifeq ($(CONFIG_ARCH_CORTEXM4),y)
  TOOLCHAIN_ARM7EM   := y
  TOOLCHAIN_MTUNE    := -mtune=cortex-m4
  TOOLCHAIN_MARCH    := -march=armv7e-m
  ifeq ($(CONFIG_ARCH_FPU),y)
    TOOLCHAIN_MFLOAT := -mfpu=fpv4-sp-d16
  endif
else ifeq ($(CONFIG_ARCH_CORTEXM7),y)
  TOOLCHAIN_ARM7EM   := y
  TOOLCHAIN_MTUNE    := -mtune=cortex-m7
  TOOLCHAIN_MARCH    := -march=armv7e-m
  ifeq ($(CONFIG_ARCH_FPU),y)
    ifeq ($(CONFIG_ARCH_DPFPU),y)
      TOOLCHAIN_MFLOAT := -mfpu=fpv5-d16
    else
      TOOLCHAIN_MFLOAT := -mfpu=fpv5-sp-d16
    endif
  endif
else # ifeq ($(CONFIG_ARCH_CORTEXM3),y)
  TOOLCHAIN_ARM7EM   := n
  TOOLCHAIN_MTUNE    := -mtune=cortex-m3
  TOOLCHAIN_MARCH    := -march=armv7-m
  TOOLCHAIN_MFLOAT   := -mfloat-abi=soft
endif

ifeq ($(CONFIG_ARCH_FPU),y)
  ifeq ($(CONFIG_ARM_FPU_ABI_SOFT),y)
    TOOLCHAIN_MFLOAT += -mfloat-abi=softfp
  else
    TOOLCHAIN_MFLOAT += -mfloat-abi=hard
  endif
else
  TOOLCHAIN_MFLOAT += -mfloat-abi=soft
endif

# Clang Configuration files

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),CLANG)

  ifeq ($(CONFIG_ARCH_CORTEXM4),y)
    ifeq ($(CONFIG_ARCH_FPU),y)
      TOOLCHAIN_MARCH += --config armv7em_hard_fpv4_sp_d16_nosys
    else
      TOOLCHAIN_MARCH += --config armv7em_soft_nofp_nosys
    endif
  else ifeq ($(CONFIG_ARCH_CORTEXM7),y)
    ifeq ($(CONFIG_ARCH_FPU),y)
      TOOLCHAIN_MARCH += --config armv7em_hard_fpv5_d16_nosys
    else
      TOOLCHAIN_MARCH += --config armv7em_soft_nofp_nosys
    endif
  else # ifeq ($(CONFIG_ARCH_CORTEXM3),y)
      TOOLCHAIN_MARCH += --config armv7m_soft_nofp_nosys
  endif

endif

# Link Time Optimization

ifeq ($(CONFIG_LTO_THIN),y)
  MAXOPTIMIZATION += -flto=thin
else ifeq ($(CONFIG_LTO_FULL),y)
  MAXOPTIMIZATION += -flto
endif

# NuttX buildroot under Linux or Cygwin

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),BUILDROOT)
ifeq ($(CONFIG_ARMV7M_OABI_TOOLCHAIN),y)
  CROSSDEV ?= arm-nuttx-elf-
  ARCHCPUFLAGS = $(TOOLCHAIN_MARCH) $(TOOLCHAIN_MTUNE) $(TOOLCHAIN_MFLOAT)
else
  CROSSDEV ?= arm-nuttx-eabi-
  ARCHCPUFLAGS = $(TOOLCHAIN_MARCH) $(TOOLCHAIN_MTUNE) -mthumb $(TOOLCHAIN_MFLOAT)
endif
endif

ifeq ($(CONFIG_MM_KASAN),y)
  ARCHCPUFLAGS += -fsanitize=kernel-address
endif

# Generic GNU EABI toolchain

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),GNU_EABI)
  CROSSDEV ?= arm-none-eabi-
  ARCHCPUFLAGS = $(TOOLCHAIN_MARCH) $(TOOLCHAIN_MTUNE) -mthumb $(TOOLCHAIN_MFLOAT)
endif

# Clang toolchain

ifeq ($(CONFIG_ARMV7M_TOOLCHAIN),CLANG)
  ARCHCPUFLAGS = $(TOOLCHAIN_MARCH) $(TOOLCHAIN_MTUNE) $(TOOLCHAIN_MFLOAT)

  CC      = clang
  CXX     = clang++
  CPP     = clang -E -P -x c
  LD      = ld.lld -m armelf
  STRIP   = llvm-strip --strip-unneeded
  AR      = llvm-ar rcs
  NM      = llvm-nm
  OBJCOPY = llvm-objcopy
  OBJDUMP = llvm-objdump

  # Since the no_builtin attribute is not fully supported on Clang
  # disable the built-in functions, refer:
  # https://github.com/apache/incubator-nuttx/pull/5971

  MAXOPTIMIZATION += -fno-builtin

# Default toolchain

else
  CC      = $(CROSSDEV)gcc
  CXX     = $(CROSSDEV)g++
  CPP     = $(CROSSDEV)gcc -E -P -x c
  LD      = $(CROSSDEV)ld
  STRIP   = $(CROSSDEV)strip --strip-unneeded
  AR      = $(CROSSDEV)ar rcs
  NM      = $(CROSSDEV)nm
  OBJCOPY = $(CROSSDEV)objcopy
  OBJDUMP = $(CROSSDEV)objdump
endif

# Architecture flags

ARCHCFLAGS += -fno-common
ARCHCXXFLAGS += -fno-common

ifneq ($(CONFIG_CXX_EXCEPTION),y)
  ARCHCXXFLAGS += -fno-exceptions -fcheck-new
endif

ifneq ($(CONFIG_CXX_RTTI),y)
  ARCHCXXFLAGS += -fno-rtti
endif

# Optimization of unused sections

ifeq ($(CONFIG_DEBUG_OPT_UNUSED_SECTIONS),y)
  LDFLAGS         += --gc-sections
  MAXOPTIMIZATION += -ffunction-sections -fdata-sections
endif

# Debug link map

ifeq ($(CONFIG_DEBUG_LINK_MAP),y)
  LDFLAGS += --cref -Map=$(call CONVERT_PATH,$(TOPDIR)$(DELIM)nuttx.map)
endif

# Add the builtin library

COMPILER_RT_LIB = $(shell $(CC) $(ARCHCPUFLAGS) --print-libgcc-file-name)
ifeq ($(wildcard $(COMPILER_RT_LIB)),)
  # if "--print-libgcc-file-name" unable to find the correct libgcc PATH
  # then go ahead and try "--print-file-name"
  COMPILER_RT_LIB := $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name $(notdir $(COMPILER_RT_LIB))))
endif

EXTRA_LIBS += $(COMPILER_RT_LIB)

ifneq ($(CONFIG_LIBM),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libm.a))
endif

ifeq ($(CONFIG_LIBSUPCXX),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libsupc++.a))
endif
