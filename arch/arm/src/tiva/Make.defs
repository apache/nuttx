############################################################################
# arch/arm/src/tiva/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

CMN_ASRCS  = arm_saveusercontext.S arm_fullcontextrestore.S arm_switchcontext.S
CMN_ASRCS += arm_testset.S arm_fetchadd.S  vfork.S

ifeq ($(CONFIG_ARCH_SETJMP_H),y)
ifeq ($(CONFIG_ARCH_TOOLCHAIN_GNU),y)
CMN_ASRCS += arm_setjmp.S
endif
endif

CMN_CSRCS  = arm_assert.c arm_blocktask.c arm_copyfullstate.c arm_createstack.c
CMN_CSRCS += arm_doirq.c arm_exit.c arm_hardfault.c arm_initialize.c
CMN_CSRCS += arm_initialstate.c arm_interruptcontext.c arm_mdelay.c
CMN_CSRCS += arm_memfault.c arm_modifyreg8.c arm_modifyreg16.c arm_modifyreg32.c
CMN_CSRCS += arm_releasepending.c arm_releasestack.c arm_reprioritizertr.c
CMN_CSRCS += arm_schedulesigaction.c arm_sigdeliver.c arm_stackframe.c
CMN_CSRCS += arm_svcall.c arm_trigger_irq.c arm_unblocktask.c arm_udelay.c
CMN_CSRCS += arm_usestack.c arm_vfork.c

ifeq ($(CONFIG_ARM_SEMIHOSTING_HOSTFS),y)
  CMN_CSRCS += arm_hostfs.c
endif

ifneq ($(CONFIG_ARCH_IDLE_CUSTOM),y)
  CMN_CSRCS += tiva_idle.c
endif

ifeq ($(CONFIG_ARMV7M_LAZYFPU),y)
  CMN_ASRCS += arm_lazyexception.S
else
  CMN_ASRCS += arm_exception.S
endif

CMN_CSRCS += arm_vectors.c

ifeq ($(CONFIG_ARCH_FPU),y)
  CMN_ASRCS += arm_fpu.S
  CMN_CSRCS += arm_copyarmstate.c
endif

ifeq ($(CONFIG_ARCH_RAMVECTORS),y)
  CMN_CSRCS += arm_ramvec_initialize.c arm_ramvec_attach.c
endif

ifeq ($(CONFIG_STACK_COLORATION),y)
  CMN_CSRCS += arm_checkstack.c
endif

ifeq ($(CONFIG_ARM_MPU),y)
CMN_CSRCS += arm_mpu.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
  CMN_CSRCS += arm_task_start.c arm_pthread_start.c
  CMN_CSRCS += arm_signal_dispatch.c
  CMN_UASRCS += arm_signal_handler.S
else
  CMN_CSRCS += arm_allocateheap.c
endif

CHIP_CSRCS  = tiva_allocateheap.c tiva_irq.c tiva_lowputc.c tiva_serial.c
CHIP_CSRCS += tiva_ssi.c

ifeq ($(CONFIG_ARCH_CHIP_LM3S),y)
  CHIP_CSRCS += lmxx_tm4c_start.c lm3s_gpio.c lmxx_tm4c_gpioirq.c
  CHIP_CSRCS += lm4xx_tm3c_sysctrl.c
else ifeq ($(CONFIG_ARCH_CHIP_LM4F),y)
  CHIP_CSRCS += lmxx_tm4c_start.c lm4f_gpio.c lmxx_tm4c_gpioirq.c
  CHIP_CSRCS += lm4xx_tm3c_sysctrl.c
else ifeq ($(CONFIG_ARCH_CHIP_TM4C),y)
  CHIP_CSRCS += lmxx_tm4c_start.c tm4c_gpio.c lmxx_tm4c_gpioirq.c
ifeq ($(CONFIG_ARCH_CHIP_TM4C129),y)
  CHIP_CSRCS += tm4c129_sysctrl.c
else
  CHIP_CSRCS += lm4xx_tm3c_sysctrl.c
endif
else ifeq ($(CONFIG_ARCH_CHIP_CC13X0),y)
  CHIP_CSRCS += cc13xx_start.c cc13xx_prcm.c cc13xx_chipinfo.c cc13xx_gpio.c
  CHIP_CSRCS += cc13xx_gpioirq.c cc13xx_enableclks.c cc13xx_enablepwr.c
  CHIP_CSRCS += cc13x0_trim.c cc13x0_rom.c
else ifeq ($(CONFIG_ARCH_CHIP_CC13X2),y)
  CHIP_CSRCS += cc13xx_start.c cc13xx_prcm.c cc13xx_chipinfo.c cc13xx_gpio.c
  CHIP_CSRCS += cc13xx_gpioirq.c cc13xx_enableclks.c cc13xx_enablepwr.c
  CHIP_CSRCS += cc13x2_aux_sysif.c
ifeq ($(CONFIG_ARCH_CHIP_CC13XX_V1),y)
  CHIP_CSRCS += cc13x2_v1_trim.c cc13x2_cc26x2_v1_rom.c
else
  CHIP_CSRCS += cc13x2_v2_trim.c
endif
endif

ifeq ($(CONFIG_DEBUG_GPIO_INFO),y)
  CHIP_CSRCS += tiva_dumpgpio.c
endif

ifneq ($(CONFIG_SCHED_TICKLESS),y)
  CHIP_CSRCS += tiva_timerisr.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
  CHIP_CSRCS += tiva_userspace.c tiva_mpuinit.c
endif

ifeq ($(CONFIG_TIVA_I2C),y)
  CHIP_CSRCS += tiva_i2c.c
endif

ifeq ($(CONFIG_TIVA_PWM),y)
  CHIP_CSRCS += tiva_pwm.c
endif

ifeq ($(CONFIG_TIVA_QEI),y)
  CHIP_CSRCS += tiva_qencoder.c
endif

ifeq ($(CONFIG_TIVA_TIMER),y)
  CHIP_CSRCS += tiva_timerlib.c
ifeq ($(CONFIG_TIVA_TIMER32_PERIODIC),y)
  CHIP_CSRCS += tiva_timerlow32.c
endif
endif

ifeq ($(CONFIG_TIVA_ADC),y)
  CHIP_CSRCS += tiva_adclow.c
  CHIP_CSRCS += tiva_adclib.c
endif

ifeq ($(CONFIG_TIVA_ETHERNET),y)
ifeq ($(CONFIG_ARCH_CHIP_LM3S),y)
  CHIP_CSRCS += lm3s_ethernet.c
endif
ifeq ($(CONFIG_ARCH_CHIP_TM4C),y)
  CHIP_CSRCS += tm4c_ethernet.c
endif
endif

ifeq ($(CONFIG_TIVA_FLASH),y)
  CHIP_CSRCS += tiva_flash.c
endif

ifeq ($(CONFIG_TIVA_EEPROM),y)
  CHIP_CSRCS += tiva_eeprom.c
endif

ifeq ($(CONFIG_TIVA_HCIUART),y)
CHIP_CSRCS += tiva_hciuart.c
endif

# Paths to source files

VPATH += chip/common

ifeq ($(CONFIG_ARCH_CHIP_LM),y)
VPATH += chip/lm
else ifeq ($(CONFIG_ARCH_CHIP_TM4C),y)
VPATH += chip/tm4c
else ifeq ($(CONFIG_ARCH_CHIP_CC13X0),y)
VPATH += chip/cc13xx
else ifeq ($(CONFIG_ARCH_CHIP_CC13X2),y)
VPATH += chip/cc13xx
endif
