############################################################################
# arch/arm/src/armv/Toolchain.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

# Setup for the selected toolchain

#
# Handle old-style chip-specific toolchain names in the absence of
# a new-style toolchain specification, force the selection of a single
# toolchain and allow the selected toolchain to be overridden by a
# command-line selection.
#

ifeq ($(filter y, \
      $(CONFIG_ARM_TOOLCHAIN_BUILDROOT) \
    ),y)
  CONFIG_ARM_TOOLCHAIN ?= BUILDROOT
endif

ifeq ($(filter y, \
      $(CONFIG_ARM_TOOLCHAIN_GNU_EABIL) \
    ),y)
  CONFIG_ARM_TOOLCHAIN ?= GNU_EABIL
endif

ifeq ($(filter y, \
      $(CONFIG_ARM_TOOLCHAIN_GNU_EABIW) \
    ),y)
  CONFIG_ARM_TOOLCHAIN ?= GNU_EABIW
endif

#
# Supported toolchains
#
# TODO - It's likely that all of these toolchains now support the
#        CortexM4.  Since they are all GCC-based, we could almost
#        certainly simplify this further.
#
# Each toolchain definition should set:
#
#  CROSSDEV         The GNU toolchain triple (command prefix)
#  ARCROSSDEV       If required, an alternative prefix used when
#                   invoking ar and nm.
#  ARCHCPUFLAGS     CPU-specific flags selecting the instruction set
#                   FPU options, etc.
#  MAXOPTIMIZATION  The maximum optimization level that results in
#                   reliable code generation.
#

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  MAXOPTIMIZATION := $(CONFIG_DEBUG_OPTLEVEL)
endif

# NuttX buildroot under Linux or Cygwin

ifeq ($(CONFIG_ARM_TOOLCHAIN),BUILDROOT)
ifeq ($(CONFIG_ARM_OABI_TOOLCHAIN),y)
  CROSSDEV ?= arm-nuttx-elf-
  ARCROSSDEV ?= arm-nuttx-elf-
else
  CROSSDEV ?= arm-nuttx-eabi-
  ARCROSSDEV ?= arm-nuttx-eabi-
endif
  MAXOPTIMIZATION ?= -Os
endif

# Generic GNU EABI toolchain on macOS, Linux or any typical Posix system

ifeq ($(CONFIG_ARM_TOOLCHAIN),GNU_EABIL)
  CROSSDEV ?= arm-none-eabi-
  ARCROSSDEV ?= arm-none-eabi-
  MAXOPTIMIZATION ?= -Os
endif

# Generic GNU EABI toolchain under Windows

ifeq ($(CONFIG_ARM_TOOLCHAIN),GNU_EABIW)
  CROSSDEV ?= arm-none-eabi-
  ARCROSSDEV ?= arm-none-eabi-
  MAXOPTIMIZATION ?= -Os
  ifeq ($(CONFIG_WINDOWS_CYGWIN),y)
    WINTOOL = y
  endif
endif
