############################################################################
# arch/arm/src/lpc17xx_40xx/Make.defs
#
#   Copyright (C) 2010-2011, 2013-2015, 2018 Gregory Nutt. All rights reserved.
#   Author: Gregory Nutt <gnutt@nuttx.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

# Common ARM and Cortex-M3 files

CMN_ASRCS  = arm_saveusercontext.S arm_fullcontextrestore.S arm_switchcontext.S
CMN_ASRCS += arm_testset.S arm_fetchadd.S vfork.S

ifeq ($(CONFIG_ARCH_SETJMP_H),y)
ifeq ($(CONFIG_ARCH_TOOLCHAIN_GNU),y)
CMN_ASRCS += arm_setjmp.S
endif
endif

CMN_CSRCS  = arm_assert.c arm_blocktask.c arm_copyfullstate.c arm_createstack.c
CMN_CSRCS += arm_mdelay.c arm_udelay.c arm_exit.c arm_initialize.c arm_memfault.c
CMN_CSRCS += arm_initialstate.c arm_interruptcontext.c arm_modifyreg8.c
CMN_CSRCS += arm_modifyreg16.c arm_modifyreg32.c arm_releasepending.c
CMN_CSRCS += arm_releasestack.c arm_reprioritizertr.c arm_schedulesigaction.c
CMN_CSRCS += arm_sigdeliver.c arm_stackframe.c arm_trigger_irq.c
CMN_CSRCS += arm_unblocktask.c arm_usestack.c arm_doirq.c arm_hardfault.c
CMN_CSRCS += arm_svcall.c arm_checkstack.c arm_vfork.c
CMN_CSRCS += arm_systemreset.c

ifeq ($(CONFIG_ARMV7M_STACKCHECK),y)
CMN_CSRCS += arm_stackcheck.c
endif

ifeq ($(CONFIG_ARMV7M_LAZYFPU),y)
CMN_ASRCS += arm_lazyexception.S
else
CMN_ASRCS += arm_exception.S
endif
CMN_CSRCS += arm_vectors.c

ifeq ($(CONFIG_ARCH_RAMVECTORS),y)
CMN_CSRCS += arm_ramvec_initialize.c arm_ramvec_attach.c
endif

ifeq ($(CONFIG_ARM_MPU),y)
CMN_CSRCS += arm_mpu.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
CMN_CSRCS += arm_task_start.c arm_pthread_start.c
CMN_CSRCS += arm_signal_dispatch.c
CMN_UASRCS += arm_signal_handler.S
endif

# Use of common/arm_etherstub.c is deprecated.  The preferred mechanism is to
# use CONFIG_NETDEV_LATEINIT=y to suppress the call to arm_netinitialize() in
# up_initialize().  Then this stub would not be needed.

ifeq ($(CONFIG_NET),y)
ifneq ($(CONFIG_LPC17_40_ETHERNET),y)
CMN_CSRCS += arm_etherstub.c
endif
endif

ifeq ($(CONFIG_ARCH_FPU),y)
CMN_ASRCS += arm_fpu.S
CMN_CSRCS += arm_copyarmstate.c
endif

# Required LPC17xx files

CHIP_CSRCS  = lpc17_40_allocateheap.c lpc17_40_clockconfig.c lpc17_40_clrpend.c
CHIP_CSRCS += lpc17_40_gpio.c lpc17_40_i2c.c lpc17_40_irq.c lpc17_40_lowputc.c
CHIP_CSRCS += lpc17_40_serial.c lpc17_40_spi.c lpc17_40_ssp.c lpc17_40_start.c

# Configuration-dependent LPC17xx files

ifneq ($(CONFIG_ARCH_IDLE_CUSTOM),y)
CHIP_CSRCS += lpc17_40_idle.c
endif

ifneq ($(CONFIG_SCHED_TICKLESS),y)
CHIP_CSRCS += lpc17_40_timerisr.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
CHIP_CSRCS += lpc17_40_userspace.c lpc17_40_mpuinit.c
endif

ifeq ($(CONFIG_LPC17_40_EMC),y)
CHIP_CSRCS += lpc17_40_emc.c
endif

ifeq ($(CONFIG_LPC17_40_GPIOIRQ),y)
CHIP_CSRCS += lpc17_40_gpioint.c
endif

ifeq ($(CONFIG_DEBUG_GPIO_INFO),y)
CHIP_CSRCS += lpc17_40_gpiodbg.c
endif

ifeq ($(CONFIG_LPC17_40_LCD),y)
CHIP_CSRCS += lpc17_40_lcd.c
endif

ifeq ($(CONFIG_USBDEV),y)
CHIP_CSRCS += lpc17_40_usbdev.c
endif

ifeq ($(CONFIG_USBHOST),y)
CHIP_CSRCS += lpc17_40_usbhost.c
endif

ifeq ($(CONFIG_LPC17_40_GPDMA),y)
CHIP_CSRCS += lpc17_40_gpdma.c
endif

ifeq ($(CONFIG_LPC17_40_SDCARD),y)
CHIP_CSRCS += lpc17_40_sdcard.c
endif

ifeq ($(CONFIG_NET),y)
ifeq ($(CONFIG_LPC17_40_ETHERNET),y)
CHIP_CSRCS += lpc17_40_ethernet.c
endif
endif

ifeq ($(CONFIG_CAN),y)
CHIP_CSRCS += lpc17_40_can.c
endif

ifeq ($(CONFIG_LPC17_40_ADC),y)
CHIP_CSRCS += lpc17_40_adc.c
endif

ifeq ($(CONFIG_LPC17_40_DAC),y)
CHIP_CSRCS += lpc17_40_dac.c
endif

ifeq ($(CONFIG_LPC17_40_RTC),y)
CHIP_CSRCS += lpc176x_rtc.c
endif

ifeq ($(CONFIG_LPC17_40_PWM1),y)
CHIP_CSRCS += lpc17_40_pwm.c
endif

ifeq ($(CONFIG_LPC17_40_MCPWM),y)
CHIP_CSRCS += lpc17_40_mcpwm.c
endif

ifeq ($(CONFIG_LPC17_40_TMR0),y)
CHIP_CSRCS += lpc17_40_timer.c
endif

ifeq ($(CONFIG_MTD_PROGMEM),y)
CHIP_CSRCS += lpc17_40_progmem.c
endif
