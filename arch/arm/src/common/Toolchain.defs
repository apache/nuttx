############################################################################
# arch/arm/src/common/Toolchain.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

#
# Supported toolchains
#
# Each toolchain definition should set:
#
#  CROSSDEV         The GNU toolchain triple (command prefix)
#  ARCHCPUFLAGS     CPU-specific flags selecting the instruction set
#                   FPU options, etc.
#  ARCHOPTIMIZATION The optimization level that results in
#                   reliable code generation.
#

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  ARCHOPTIMIZATION += $(CONFIG_DEBUG_OPTLEVEL)
else ifeq ($(CONFIG_DEBUG_FULLOPT),y)
  ifeq ($(CONFIG_ARCH_TOOLCHAIN_CLANG),y)
    ARCHOPTIMIZATION += -Oz
  else
    ARCHOPTIMIZATION += -Os
  endif
endif

ifneq ($(CONFIG_DEBUG_NOOPT),y)
  ARCHOPTIMIZATION += -fno-strict-aliasing
endif

ifeq ($(CONFIG_FRAME_POINTER),y)
  ARCHOPTIMIZATION += -fno-omit-frame-pointer -fno-optimize-sibling-calls
else
  ARCHOPTIMIZATION += -fomit-frame-pointer
endif

ifeq ($(CONFIG_STACK_CANARIES),y)
  ARCHOPTIMIZATION += -fstack-protector-all
endif

ifeq ($(CONFIG_STACK_USAGE),y)
  ARCHOPTIMIZATION += -fstack-usage
endif

ifeq ($(CONFIG_ARCH_COVERAGE_ALL),y)
  ARCHOPTIMIZATION += -fprofile-generate -ftest-coverage
endif

ifeq ($(CONFIG_MM_UBSAN_ALL),y)
  ARCHOPTIMIZATION += $(CONFIG_MM_UBSAN_OPTION)
endif

ifeq ($(CONFIG_MM_UBSAN_TRAP_ON_ERROR),y)
  ARCHOPTIMIZATION += -fsanitize-undefined-trap-on-error
endif

ifeq ($(CONFIG_MM_KASAN_ALL),y)
  ARCHOPTIMIZATION += -fsanitize=kernel-address
endif

ifeq ($(CONFIG_UNWINDER_ARM),y)
  ARCHOPTIMIZATION += -funwind-tables -fasynchronous-unwind-tables
endif

# Link Time Optimization

ifeq ($(CONFIG_LTO_THIN),y)
  ARCHOPTIMIZATION += -flto=thin
  ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),y)
    LDFLAGS += --lto
  endif
else ifeq ($(CONFIG_LTO_FULL),y)
  ARCHOPTIMIZATION += -flto
  ifeq ($(CONFIG_ARM_TOOLCHAIN_GNU_EABI),y)
    ARCHOPTIMIZATION += -fuse-linker-plugin
  endif
  ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),y)
    LDFLAGS += --lto
  endif
endif

# NuttX buildroot under Linux or Cygwin

ifeq ($(CONFIG_ARM_TOOLCHAIN_BUILDROOT),y)
  TARGET_TOOL := -nuttx-eabi-
else ifeq ($(CONFIG_ARM_TOOLCHAIN_BUILDROOT_OABI),y)
  TARGET_TOOL := -nuttx-elf-
else ifeq ($(CONFIG_ARM_TOOLCHAIN_GNU_EABI),y)
  TARGET_TOOL := -none-eabi-
endif

ifneq ($(TARGET_TOOL),)
  ifeq ($(CONFIG_ENDIAN_BIG),y)

    # Fallback to common toolchain if "armeb" is unavailable

    ifeq ($(shell command -v armeb$(TARGET_TOOL)gcc 2> /dev/null),)
      TARGET_ARCH := arm
      ARCHCPUFLAGS += -mlittle-endian
    else
      TARGET_ARCH := armeb
      ARCHCPUFLAGS += -mbig-endian
    endif
  else
    ARCHCPUFLAGS += -mlittle-endian
    TARGET_ARCH := arm
  endif

  CROSSDEV ?= $(TARGET_ARCH)$(TARGET_TOOL)
endif

ARCHCPUFLAGS += $(TOOLCHAIN_MARCH) $(TOOLCHAIN_MTUNE) $(TOOLCHAIN_MFLOAT)

ifeq ($(CONFIG_ARM_THUMB),y)
  ARCHCPUFLAGS += -mthumb

  # GCC Manual:
  # -mthumb
  # ... If you want to force assembler files to be interpreted as Thumb
  # code, either add a `.thumb' directive to the source or pass the
  # -mthumb option directly to the assembler by prefixing it with -Wa.

  ARCHCPUFLAGS += -Wa,-mthumb

  # Outputs an implicit IT block when there is a conditional instruction
  # without an enclosing IT block.

  ARCHCPUFLAGS += -Wa,-mimplicit-it=always
endif

# Clang toolchain

ifeq ($(CONFIG_ARM_TOOLCHAIN_CLANG),y)

  CC      = clang
  CXX     = clang++
  CPP     = clang -E -P -x c
  LD      = ld.lld -m armelf
  STRIP   = llvm-strip --strip-unneeded
  AR      = llvm-ar rcs
  NM      = llvm-nm
  OBJCOPY = llvm-objcopy
  OBJDUMP = llvm-objdump

  # Since the no_builtin attribute is not fully supported on Clang
  # disable the built-in functions, refer:
  # https://github.com/apache/nuttx/pull/5971

  ARCHOPTIMIZATION += -fno-builtin

# ARM Compiler Clang toolchain

else ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),y)

  CC      = armclang
  CXX     = armclang
  CPP     = armclang -E -P -x c
  LD      = armlink
  STRIP   = llvm-strip --strip-unneeded
  AR      = armar -rcs
  NM      = llvm-nm
  OBJCOPY = llvm-objcopy
  OBJDUMP = llvm-objdump

  # Since the no_builtin attribute is not fully supported on Clang
  # disable the built-in functions, refer:
  # https://github.com/apache/nuttx/pull/5971

  ARCHOPTIMIZATION += -fno-builtin
  ARCHOPTIMIZATION += --target=arm-arm-none-eabi

  # Suppress license warning

  ARCHCPUFLAGS += -Wno-license-management
  LDFLAGS      += --diag_suppress=9931

  # Input sections are specified even though there will be no such
  # sections found in the libraries linked.
  # Warning: L6314W: No section matches pattern *(xxx).

  LDFLAGS      += --diag_suppress=6314

  # Allow Empty Execution region declared on scatter
  # Warning: L6312W: Empty Execution region description for region xxx

  LDFLAGS      += --diag_suppress=6312

  # Match pattern for an unused section that is being removed.
  # Warning: L6329W: Pattern xxx only matches removed unused sections.

  LDFLAGS      += --diag_suppress=6329

# Default toolchain

else
  CC      = $(CROSSDEV)gcc
  CXX     = $(CROSSDEV)g++
  CPP     = $(CROSSDEV)gcc -E -P -x c
  LD      = $(CROSSDEV)ld
  STRIP   = $(CROSSDEV)strip --strip-unneeded
  AR      = $(CROSSDEV)ar rcs
  NM      = $(CROSSDEV)nm
  OBJCOPY = $(CROSSDEV)objcopy
  OBJDUMP = $(CROSSDEV)objdump

  ifeq ($(CONFIG_LTO_FULL),y)
    ifeq ($(CONFIG_ARM_TOOLCHAIN_GNU_EABI),y)
      LD := $(CROSSDEV)gcc
      AR := $(CROSSDEV)gcc-ar rcs
      NM := $(CROSSDEV)gcc-nm
      ARCHOPTIMIZATION += -fno-builtin
    endif
  endif

  # Workaround to skip -Warray-bounds check due to bug of GCC-12.2:
  # Wrong warning array subscript [0] is outside array bounds:
  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105523

  ifeq ($(GCCVER),)
    export GCCVER := $(shell $(CC) --version | grep gcc | sed -r "s/.* ([0-9]+\.[0-9]+).*/\1/")
  endif

  ifeq ($(GCCVER),12.2)
    ARCHOPTIMIZATION += --param=min-pagesize=0
    ifeq ($(CONFIG_ARCH_RAMFUNCS),y)
      LDFLAGS += --no-warn-rwx-segments
    endif
  endif

endif

ifeq ($(CONFIG_ARCH_TOOLCHAIN_CLANG),y)
  ARCHOPTIMIZATION += -fshort-enums
endif

# Architecture flags

ARCHCFLAGS += -Wstrict-prototypes
ARCHCXXFLAGS += -nostdinc++

ifneq ($(CONFIG_CXX_STANDARD),)
  ARCHCXXFLAGS += -std=$(CONFIG_CXX_STANDARD)
endif

ifneq ($(CONFIG_CXX_EXCEPTION),y)
  ARCHCXXFLAGS += -fno-exceptions -fcheck-new
endif

ifneq ($(CONFIG_CXX_RTTI),y)
  ARCHCXXFLAGS += -fno-rtti
endif

ARCHOPTIMIZATION += -fno-common -Wall -Wshadow -Wundef

ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),y)
  ARCHOPTIMIZATION += -nostdlib
else
  LDFLAGS += -nostdlib
endif

ifeq ($(CONFIG_ARM_THUMB),y)
  ZARCH := thumb
else
  ZARCH := arm
endif

ifeq ($(CONFIG_ARCH_FPU),y)
  ZEABI := gnueabihf
else
  ZEABI := gnueabi
endif

ZIGFLAGS = -target $(ZARCH)-freestanding-$(ZEABI) $(ZARCHCPUFLAGS)

# Optimization of unused sections

ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),)
  ifeq ($(CONFIG_DEBUG_OPT_UNUSED_SECTIONS),y)
    LDFLAGS          += --gc-sections
    ARCHOPTIMIZATION += -ffunction-sections -fdata-sections
  endif
endif

# Debug link map

ifeq ($(CONFIG_DEBUG_LINK_MAP),y)
  ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),)
    LDFLAGS += --cref -Map=$(call CONVERT_PATH,$(TOPDIR)$(DELIM)nuttx.map)
  else
    LDFLAGS += --strict --map --xref --symbols --info=unused --info=veneers
    LDFLAGS += --info=summarysizes --info=summarystack
  endif
endif

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHOPTIMIZATION += -g
  ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),y)
    LDFLAGS += --debug
  endif
endif

# Add the builtin library

COMPILER_RT_LIB = $(shell $(CC) $(ARCHCPUFLAGS) --print-libgcc-file-name)
ifeq ($(CONFIG_ARCH_TOOLCHAIN_CLANG),y)
  ifeq ($(wildcard $(COMPILER_RT_LIB)),)
    # if "--print-libgcc-file-name" unable to find the correct libgcc PATH
    # then go ahead and try "--print-file-name"
    COMPILER_RT_LIB := $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name $(notdir $(COMPILER_RT_LIB))))
  endif
endif

EXTRA_LIBS += $(COMPILER_RT_LIB)

ifeq ($(CONFIG_LIBM_TOOLCHAIN),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libm.a))
endif

ifeq ($(CONFIG_LIBSUPCXX),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libsupc++.a))
endif

ifeq ($(CONFIG_ARCH_COVERAGE),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libgcov.a))
endif

# Zig toolchain

include $(TOPDIR)/tools/Zig.defs

# Rust toolchain

include $(TOPDIR)/tools/Rust.defs
